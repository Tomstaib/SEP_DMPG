import unittest
from src.core.source import Source
from src.core.server import Server
from src.core.sink import Sink
from src.util.global_imports import random
from src.util.simulations import run_simulation, run_replications


def setup_model5_1(env) -> None:
    """Sets up the model 5_1 with the given environment."""
    source = Source(env, "Source", (random.expovariate, 1 / 6))
    placement = Server(env, "Placement", (random.triangular, 3, 4, 5))
    inspection = Server(env, "Inspection", (random.uniform, 2, 4))
    good_parts = Sink(env, "Goodparts")
    bad_parts = Sink(env, "Badparts")

    source.connect(placement)
    placement.connect(inspection)
    inspection.connect(good_parts, 92)
    inspection.connect(bad_parts, 8)


class TestCases(unittest.TestCase):

    def test_single_run(self) -> None:
        """Test a single run of the model."""
        pivot_table = run_simulation(model=setup_model5_1, minutes=72000)  # 1200 hours

        # AlmostEqual for minor discrepancies
        self.assertAlmostEqual(pivot_table.at[('Entity', 'Entity', 'AvgTimeInSystem'), 'Value'], 10.7298, places=4)

    def test_sequential_replications(self) -> None:
        """Test sequential replications of the model."""
        pivot_table = run_replications(model=setup_model5_1, minutes=7200, num_replications=10, multiprocessing=False)

        self.assertAlmostEqual(pivot_table.at[('Entity', 'Entity', 'AvgTimeInSystem'), 'Minimum'], 10.1129, places=4)
        self.assertAlmostEqual(pivot_table.at[('Entity', 'Entity', 'AvgTimeInSystem'), 'Average'], 10.9527, places=4)
        self.assertAlmostEqual(pivot_table.at[('Entity', 'Entity', 'AvgTimeInSystem'), 'Maximum'], 12.0965, places=4)
        self.assertAlmostEqual(pivot_table.at[('Entity', 'Entity', 'AvgTimeInSystem'), 'Half-Width'], 0.354, places=4)

    def test_parallel_replications(self) -> None:
        """Test parallel replications of the model."""
        pivot_table = run_replications(model=setup_model5_1, minutes=7200, num_replications=10, multiprocessing=True)

        self.assertAlmostEqual(pivot_table.at[('Entity', 'Entity', 'AvgTimeInSystem'), 'Minimum'], 10.1129, places=4)
        self.assertAlmostEqual(pivot_table.at[('Entity', 'Entity', 'AvgTimeInSystem'), 'Average'], 10.9527, places=4)
        self.assertAlmostEqual(pivot_table.at[('Entity', 'Entity', 'AvgTimeInSystem'), 'Maximum'], 12.0965, places=4)
        self.assertAlmostEqual(pivot_table.at[('Entity', 'Entity', 'AvgTimeInSystem'), 'Half-Width'], 0.354, places=4)


if __name__ == '__main__':
    unittest.main()
