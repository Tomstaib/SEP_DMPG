window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "src", "modulename": "src", "kind": "module", "doc": "<p>Discrete systems are systems whose state changes occur at discrete time points. This means that these systems can only change their states at specific predetermined time intervals, unlike continuous systems where state changes can occur continuously without interruption.</p>\n\n<p>A discrete system can be viewed as a sequence of discrete events, with each event having a specific time at which it occurs. These events can be, for example, state changes such as the arrival of a part at a processing station in a manufacturing process.</p>\n\n<p>In discrete event simulation, discrete systems are modeled and analyzed. This allows for the examination and optimization of the flow and interactions within the system. Discrete systems find applications in various fields such as production, logistics, transportation, telecommunications, and more.</p>\n"}, {"fullname": "src.core", "modulename": "src.core", "kind": "module", "doc": "<p>The core directory contains essential components for the simulation framework.</p>\n\n<pre><code>entity.py: This module defines the Entity class, which represents entities moving through the simulation system. Entities can have attributes and states that evolve over time as they interact with other components of the simulation. The Entity class is responsible for managing the lifecycle of entities, including their creation and, optionally, destruction times. Additionally, the EntityManager class tracks and manages collections of Entity instances, ensuring efficient management within the simulation framework.\n\nqueue_orders.py: This module implements the QueueOrders class, which manages the order queue within the simulation. It handles the arrival and departure of entities from queues, maintaining the order in which entities are processed.\n\nserver.py: The Server class defined in this module simulates processing stations or servers within the simulation. It manages the processing of entities, including service times, resource utilization, and potential machine breakdowns. The class includes methods for processing entities, maintaining queues, handling connections to other components based on specified probabilities, and logging simulation events. Additionally, it provides a string representation of server objects.\n\nsink.py: sink.py: This module implements the Sink class, which serves as the final destination for entities within the simulation. Upon completing their journey through the system, entities arrive at the sink, where relevant statistics regarding their processing are collected. The Sink class tracks important metrics such as the total number of entities processed, the time entities spent in the system, and the maximum and minimum durations of entity processing. Additionally, the Sink class offers functionality to reset its statistics and provides a method to process entities, updating the pertinent statistics and logging processing events.\n\nsource.py: The Source class serves as the initial point for entity generation within the simulation framework. It orchestrates the creation of entities based on predefined arrival patterns and directs them into the system for further processing. The class encapsulates essential functionalities for managing entity generation, routing, and interaction with subsequent components in the simulation.\n</code></pre>\n"}, {"fullname": "src.core.connection", "modulename": "src.core.connection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.connection.Connection", "modulename": "src.core.connection", "qualname": "Connection", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "src.core.resetable_named_object.ResetAbleNamedObject, src.core.routing_object.RoutingObject"}, {"fullname": "src.core.connection.Connection.__init__", "modulename": "src.core.connection", "qualname": "Connection.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">simpy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">origin_component</span>,</span><span class=\"param\">\t<span class=\"n\">next_component</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">process_duration</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">probability</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.core.connection.Connection.connections", "modulename": "src.core.connection", "qualname": "Connection.connections", "kind": "variable", "doc": "<p></p>\n", "default_value": "ResetAbleNamedObjects(0 objects: )"}, {"fullname": "src.core.connection.Connection.probability", "modulename": "src.core.connection", "qualname": "Connection.probability", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.connection.Connection.entities_processed", "modulename": "src.core.connection", "qualname": "Connection.entities_processed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.connection.Connection.number_entered", "modulename": "src.core.connection", "qualname": "Connection.number_entered", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.connection.Connection.entities_queue", "modulename": "src.core.connection", "qualname": "Connection.entities_queue", "kind": "variable", "doc": "<p></p>\n", "annotation": ": collections.deque"}, {"fullname": "src.core.connection.Connection.origin_component", "modulename": "src.core.connection", "qualname": "Connection.origin_component", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.connection.Connection.next_component", "modulename": "src.core.connection", "qualname": "Connection.next_component", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.connection.Connection.processing", "modulename": "src.core.connection", "qualname": "Connection.processing", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.connection.Connection.process_duration", "modulename": "src.core.connection", "qualname": "Connection.process_duration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.connection.Connection.action", "modulename": "src.core.connection", "qualname": "Connection.action", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.connection.Connection.reset", "modulename": "src.core.connection", "qualname": "Connection.reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.connection.Connection.handle_entity_arrival", "modulename": "src.core.connection", "qualname": "Connection.handle_entity_arrival", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.connection.Connection.run", "modulename": "src.core.connection", "qualname": "Connection.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.connection.Connection.log_and_process", "modulename": "src.core.connection", "qualname": "Connection.log_and_process", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">component</span>, </span><span class=\"param\"><span class=\"n\">next_component</span>, </span><span class=\"param\"><span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.entity", "modulename": "src.core.entity", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.entity.Entity", "modulename": "src.core.entity", "qualname": "Entity", "kind": "class", "doc": "<p>Represents a generic entity with a name, creation time, and optional destruction time.</p>\n"}, {"fullname": "src.core.entity.Entity.__init__", "modulename": "src.core.entity", "qualname": "Entity.__init__", "kind": "function", "doc": "<p>Initializes an Entity instance with Name, creation_time and destruction_time set to none and adds it to the\nEntityManager class for tracking.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name (str)</strong>:  The name of the entity.</li>\n<li><strong>creation_time (Union[int, float])</strong>:  The creation time of the entity.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">creation_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "src.core.entity.Entity.name", "modulename": "src.core.entity", "qualname": "Entity.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.entity.Entity.creation_time", "modulename": "src.core.entity", "qualname": "Entity.creation_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.entity.Entity.destruction_time", "modulename": "src.core.entity", "qualname": "Entity.destruction_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.entity.EntityManager", "modulename": "src.core.entity", "qualname": "EntityManager", "kind": "class", "doc": "<p>Manages a collection of Entity instances. Utilizes the Singleton design pattern to ensure that only one instance of\nthis class exists throughout the application.\nThis class is responsible for adding entities to a tracking list and for the destruction of all entities\nwithin that list.</p>\n", "bases": "src.util.singleton.Singleton"}, {"fullname": "src.core.entity.EntityManager.entities", "modulename": "src.core.entity", "qualname": "EntityManager.entities", "kind": "variable", "doc": "<p>List of all existing entities instances</p>\n", "annotation": ": list[src.core.entity.Entity]", "default_value": "[]"}, {"fullname": "src.core.entity.EntityManager.add_entity", "modulename": "src.core.entity", "qualname": "EntityManager.add_entity", "kind": "function", "doc": "<p>Adds an Entity instance to the EntityManager's list for tracking. This method ensures that all entities\nare accounted for and can be managed collectively.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>entity</strong>:  The Entity instance to be added to the tracking list.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.entity.EntityManager.destroy_all_entities", "modulename": "src.core.entity", "qualname": "EntityManager.destroy_all_entities", "kind": "function", "doc": "<p>Destroys all entities managed by the EntityManager by resetting their destruction time\nand clearing them from the tracking list.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.entity.SubEntity", "modulename": "src.core.entity", "qualname": "SubEntity", "kind": "class", "doc": "<p>Represents a generic entity with a name, creation time, and optional destruction time.</p>\n", "bases": "Entity"}, {"fullname": "src.core.entity.SubEntity.__init__", "modulename": "src.core.entity", "qualname": "SubEntity.__init__", "kind": "function", "doc": "<p>Initializes an Entity instance with Name, creation_time and destruction_time set to none and adds it to the\nEntityManager class for tracking.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name (str)</strong>:  The name of the entity.</li>\n<li><strong>creation_time (Union[int, float])</strong>:  The creation time of the entity.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">creation_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "src.core.entity.SubEntity.num_times_processed", "modulename": "src.core.entity", "qualname": "SubEntity.num_times_processed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.entity.SubEntity.server_history", "modulename": "src.core.entity", "qualname": "SubEntity.server_history", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.entity.SubEntity.count_processing", "modulename": "src.core.entity", "qualname": "SubEntity.count_processing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.entity.SubEntity.add_to_server_history", "modulename": "src.core.entity", "qualname": "SubEntity.add_to_server_history", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.model", "modulename": "src.core.model", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.model.ComponentType", "modulename": "src.core.model", "qualname": "ComponentType", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.core.model.ComponentType.SOURCES", "modulename": "src.core.model", "qualname": "ComponentType.SOURCES", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ComponentType.SOURCES: &#x27;Sources&#x27;&gt;"}, {"fullname": "src.core.model.ComponentType.SERVERS", "modulename": "src.core.model", "qualname": "ComponentType.SERVERS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ComponentType.SERVERS: &#x27;Servers&#x27;&gt;"}, {"fullname": "src.core.model.ComponentType.SINKS", "modulename": "src.core.model", "qualname": "ComponentType.SINKS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ComponentType.SINKS: &#x27;Sinks&#x27;&gt;"}, {"fullname": "src.core.model.Model", "modulename": "src.core.model", "qualname": "Model", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.core.model.Model.components", "modulename": "src.core.model", "qualname": "Model.components", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.model.Model.add_component", "modulename": "src.core.model", "qualname": "Model.add_component", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">component</span>, </span><span class=\"param\"><span class=\"n\">component_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.model.Model.get_components", "modulename": "src.core.model", "qualname": "Model.get_components", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.queue_type", "modulename": "src.core.queue_type", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.queue_type.QueueType", "modulename": "src.core.queue_type", "qualname": "QueueType", "kind": "class", "doc": "<p>Enumeration defining the order in which elements are processed in a queue.</p>\n\n<p>Attributes:\n    FIFO: First-In-First-Out order. Elements are processed in the order they were added.\n    LIFO: Last-In-First-Out order. The last element added is processed first.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.core.queue_type.QueueType.FIFO", "modulename": "src.core.queue_type", "qualname": "QueueType.FIFO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;QueueType.FIFO: 0&gt;"}, {"fullname": "src.core.queue_type.QueueType.LIFO", "modulename": "src.core.queue_type", "qualname": "QueueType.LIFO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;QueueType.LIFO: 1&gt;"}, {"fullname": "src.core.resetable_named_object", "modulename": "src.core.resetable_named_object", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.resetable_named_object.ResetAbleNamedObjectManager", "modulename": "src.core.resetable_named_object", "qualname": "ResetAbleNamedObjectManager", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.core.resetable_named_object.ResetAbleNamedObjectManager.resetable_named_objects", "modulename": "src.core.resetable_named_object", "qualname": "ResetAbleNamedObjectManager.resetable_named_objects", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.resetable_named_object.ResetAbleNamedObjectManager.add", "modulename": "src.core.resetable_named_object", "qualname": "ResetAbleNamedObjectManager.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rno</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.resetable_named_object.ResetAbleNamedObjectManager.reset_all", "modulename": "src.core.resetable_named_object", "qualname": "ResetAbleNamedObjectManager.reset_all", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.resetable_named_object.ResetAbleNamedObject", "modulename": "src.core.resetable_named_object", "qualname": "ResetAbleNamedObject", "kind": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n", "bases": "abc.ABC"}, {"fullname": "src.core.resetable_named_object.ResetAbleNamedObject.name", "modulename": "src.core.resetable_named_object", "qualname": "ResetAbleNamedObject.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.resetable_named_object.ResetAbleNamedObject.env", "modulename": "src.core.resetable_named_object", "qualname": "ResetAbleNamedObject.env", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.resetable_named_object.ResetAbleNamedObject.reset", "modulename": "src.core.resetable_named_object", "qualname": "ResetAbleNamedObject.reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.routing_object", "modulename": "src.core.routing_object", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.routing_object.RoutingObject", "modulename": "src.core.routing_object", "qualname": "RoutingObject", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.core.routing_object.RoutingObject.__init__", "modulename": "src.core.routing_object", "qualname": "RoutingObject.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span>, </span><span class=\"param\"><span class=\"n\">routing_expression</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.core.routing_object.RoutingObject.env", "modulename": "src.core.routing_object", "qualname": "RoutingObject.env", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.routing_object.RoutingObject.routing_expression", "modulename": "src.core.routing_object", "qualname": "RoutingObject.routing_expression", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.routing_object.RoutingObject.next_components", "modulename": "src.core.routing_object", "qualname": "RoutingObject.next_components", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.routing_object.RoutingObject.number_exited", "modulename": "src.core.routing_object", "qualname": "RoutingObject.number_exited", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.routing_object.RoutingObject.connection_cache", "modulename": "src.core.routing_object", "qualname": "RoutingObject.connection_cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.routing_object.RoutingObject.connections", "modulename": "src.core.routing_object", "qualname": "RoutingObject.connections", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.routing_object.RoutingObject.route_entity", "modulename": "src.core.routing_object", "qualname": "RoutingObject.route_entity", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.routing_object.RoutingObject.connect", "modulename": "src.core.routing_object", "qualname": "RoutingObject.connect", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">next_server</span>,</span><span class=\"param\">\t<span class=\"n\">probability</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">process_duration</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.server", "modulename": "src.core.server", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server", "modulename": "src.core.server", "qualname": "Server", "kind": "class", "doc": "<p>Represents a server in a simulation environment</p>\n", "bases": "src.core.resetable_named_object.ResetAbleNamedObject, src.core.routing_object.RoutingObject"}, {"fullname": "src.core.server.Server.__init__", "modulename": "src.core.server", "qualname": "Server.__init__", "kind": "function", "doc": "<p>Creates a server object which takes a simpy environment, and a name. You can optionally set parameters for\n distribution with a set processing time, a time between machine breakdowns, and a time for the duration of a\n machine breakdown. You can also set the queue ordering strategy which has a default value of 'FIFO'</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env</strong>:  simpy environment</li>\n<li><strong>name</strong>:  server identification for logging / pivot table</li>\n<li><strong>processing_time_distribution_with_parameters</strong>: </li>\n<li><strong>time_between_machine_breakdowns</strong>:  Time between machine breakdowns</li>\n<li><strong>machine_breakdown_duration</strong>:  Duration of the machine breakdown</li>\n<li><strong>queue_order</strong>:  e.g., FIFO</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">simpy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">processing_time_distribution_with_parameters</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">capacity</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">time_between_machine_breakdowns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">machine_breakdown_duration</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">work_schedule</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">queue_order</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">queue_type</span><span class=\"o\">.</span><span class=\"n\">QueueType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">QueueType</span><span class=\"o\">.</span><span class=\"n\">FIFO</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">routing_expression</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.core.server.Server.servers", "modulename": "src.core.server", "qualname": "Server.servers", "kind": "variable", "doc": "<p>List of all existing server instances</p>\n", "default_value": "ResetAbleNamedObjects(0 objects: )"}, {"fullname": "src.core.server.Server.week", "modulename": "src.core.server", "qualname": "Server.week", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.processing_time_dwp", "modulename": "src.core.server", "qualname": "Server.processing_time_dwp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.time_between_machine_breakdowns", "modulename": "src.core.server", "qualname": "Server.time_between_machine_breakdowns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.machine_breakdown_duration", "modulename": "src.core.server", "qualname": "Server.machine_breakdown_duration", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.queue_order", "modulename": "src.core.server", "qualname": "Server.queue_order", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.server_queue", "modulename": "src.core.server", "qualname": "Server.server_queue", "kind": "variable", "doc": "<p>List which contains all entities that have been added to the server queue.</p>\n", "annotation": ": collections.deque"}, {"fullname": "src.core.server.Server.entities_processed", "modulename": "src.core.server", "qualname": "Server.entities_processed", "kind": "variable", "doc": "<p>Counter for how many entities are processed yet.</p>\n"}, {"fullname": "src.core.server.Server.action", "modulename": "src.core.server", "qualname": "Server.action", "kind": "variable", "doc": "<p>The action that will be performed on the next component.</p>\n"}, {"fullname": "src.core.server.Server.total_processing_time_pivot_table", "modulename": "src.core.server", "qualname": "Server.total_processing_time_pivot_table", "kind": "variable", "doc": "<p>Counter for the total processing time.</p>\n"}, {"fullname": "src.core.server.Server.number_entered_pivot_table", "modulename": "src.core.server", "qualname": "Server.number_entered_pivot_table", "kind": "variable", "doc": "<p>Counter for the number of entered components.</p>\n"}, {"fullname": "src.core.server.Server.number_exited_pivot_table", "modulename": "src.core.server", "qualname": "Server.number_exited_pivot_table", "kind": "variable", "doc": "<p>Counter for the number of exited components.</p>\n"}, {"fullname": "src.core.server.Server.units_allocated", "modulename": "src.core.server", "qualname": "Server.units_allocated", "kind": "variable", "doc": "<p>Counter for the number of units allocated.</p>\n"}, {"fullname": "src.core.server.Server.units_utilized_pivot_table", "modulename": "src.core.server", "qualname": "Server.units_utilized_pivot_table", "kind": "variable", "doc": "<p>Counter for the number of units utilized.</p>\n"}, {"fullname": "src.core.server.Server.start_processing_time", "modulename": "src.core.server", "qualname": "Server.start_processing_time", "kind": "variable", "doc": "<p>Counter for the start processing time.</p>\n"}, {"fullname": "src.core.server.Server.capacity", "modulename": "src.core.server", "qualname": "Server.capacity", "kind": "variable", "doc": "<p>New attribute for server's capacity.</p>\n"}, {"fullname": "src.core.server.Server.currently_processing", "modulename": "src.core.server", "qualname": "Server.currently_processing", "kind": "variable", "doc": "<p>Track currently processing entities.</p>\n"}, {"fullname": "src.core.server.Server.processing", "modulename": "src.core.server", "qualname": "Server.processing", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.total_downtime_pivot_table", "modulename": "src.core.server", "qualname": "Server.total_downtime_pivot_table", "kind": "variable", "doc": "<p>Counts the total downtime of the Server.</p>\n"}, {"fullname": "src.core.server.Server.number_downtimes_pivot_table", "modulename": "src.core.server", "qualname": "Server.number_downtimes_pivot_table", "kind": "variable", "doc": "<p>Counts the total amount downtime of the Server.</p>\n"}, {"fullname": "src.core.server.Server.uptime", "modulename": "src.core.server", "qualname": "Server.uptime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.total_uptime", "modulename": "src.core.server", "qualname": "Server.total_uptime", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.number_uptimes", "modulename": "src.core.server", "qualname": "Server.number_uptimes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.connection_cache", "modulename": "src.core.server", "qualname": "Server.connection_cache", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.initialized", "modulename": "src.core.server", "qualname": "Server.initialized", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.units_utilized_over_time", "modulename": "src.core.server", "qualname": "Server.units_utilized_over_time", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.server.Server.reset", "modulename": "src.core.server", "qualname": "Server.reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.server.Server.is_available", "modulename": "src.core.server", "qualname": "Server.is_available", "kind": "function", "doc": "<p>Checks if the server is available.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if available, False otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.server.Server.handle_entity_arrival", "modulename": "src.core.server", "qualname": "Server.handle_entity_arrival", "kind": "function", "doc": "<p>Processes an entity and adds it to the server queue.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>entity</strong>:  Entity to process</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.server.Server.run", "modulename": "src.core.server", "qualname": "Server.run", "kind": "function", "doc": "<p>Runs the queued entities while taking the queue order into consideration</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">simpy</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">Event</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.sink", "modulename": "src.core.sink", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.sink.Sink", "modulename": "src.core.sink", "qualname": "Sink", "kind": "class", "doc": "<p>Class variable to keep track of all sink instances</p>\n", "bases": "src.core.resetable_named_object.ResetAbleNamedObject"}, {"fullname": "src.core.sink.Sink.__init__", "modulename": "src.core.sink", "qualname": "Sink.__init__", "kind": "function", "doc": "<p>Initialize a sink instance</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env (Environment)</strong>:  Reference to SimPy environment</li>\n<li><strong>name (str)</strong>:  Name of the new sink</li>\n<li><strong>addon_processing_done_method_with_parameters</strong>:  Callable to be executed as an add-on process trigger</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">simpy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">addon_processing_done_method_with_parameters</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.core.sink.Sink.sinks", "modulename": "src.core.sink", "qualname": "Sink.sinks", "kind": "variable", "doc": "<p>list of all existing sinks instances</p>\n", "default_value": "ResetAbleNamedObjects(0 objects: )"}, {"fullname": "src.core.sink.Sink.entities_processed", "modulename": "src.core.sink", "qualname": "Sink.entities_processed", "kind": "variable", "doc": "<p>Total number of entities processed by this sink.</p>\n"}, {"fullname": "src.core.sink.Sink.total_time_in_system", "modulename": "src.core.sink", "qualname": "Sink.total_time_in_system", "kind": "variable", "doc": "<p>Total time spent by entities in the system while being processed by this sink.</p>\n"}, {"fullname": "src.core.sink.Sink.max_time_in_system_pivot_table", "modulename": "src.core.sink", "qualname": "Sink.max_time_in_system_pivot_table", "kind": "variable", "doc": "<p>Maximum time any entity spent in the system while being processed by this sink.</p>\n"}, {"fullname": "src.core.sink.Sink.min_time_in_system_pivot_table", "modulename": "src.core.sink", "qualname": "Sink.min_time_in_system_pivot_table", "kind": "variable", "doc": "<p>Minimum time any entity spent in the system while being processed by this sink.</p>\n"}, {"fullname": "src.core.sink.Sink.number_entered_pivot_table", "modulename": "src.core.sink", "qualname": "Sink.number_entered_pivot_table", "kind": "variable", "doc": "<p>Total number of entities entered into this sink.</p>\n"}, {"fullname": "src.core.sink.Sink.tally_statistic", "modulename": "src.core.sink", "qualname": "Sink.tally_statistic", "kind": "variable", "doc": "<p>Callable method with parameters, called when entity processing is done.</p>\n"}, {"fullname": "src.core.sink.Sink.addon_processing_done_method_with_parameters", "modulename": "src.core.sink", "qualname": "Sink.addon_processing_done_method_with_parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.sink.Sink.processed_entities", "modulename": "src.core.sink", "qualname": "Sink.processed_entities", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.sink.Sink.reset", "modulename": "src.core.sink", "qualname": "Sink.reset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.sink.Sink.handle_entity_arrival", "modulename": "src.core.sink", "qualname": "Sink.handle_entity_arrival", "kind": "function", "doc": "<p>This method updates various statistics related to entity processing, including the time spent by the entity\nin the system, the total number of entities processed by this sink, the maximum and minimum time any entity\nspent in the system, and the number of entities entered into this sink.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>entity</strong>:  The entity to be processed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">entity</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">entity</span><span class=\"o\">.</span><span class=\"n\">Entity</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.source", "modulename": "src.core.source", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.source.Source", "modulename": "src.core.source", "qualname": "Source", "kind": "class", "doc": "<p>A source is a component that creates entities and routes them to the next component.</p>\n", "bases": "src.core.resetable_named_object.ResetAbleNamedObject, src.core.routing_object.RoutingObject"}, {"fullname": "src.core.source.Source.__init__", "modulename": "src.core.source", "qualname": "Source.__init__", "kind": "function", "doc": "<p>Create a source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env</strong>:  SimPy environment</li>\n<li><strong>name</strong>:  Name of the source</li>\n<li><strong>creation_time_distribution_with_parameters</strong>:  Tuple of distribution function and parameters</li>\n<li><strong>arrival_table_path</strong>:  Path to the arrival table</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span>,</span><span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">creation_time_distribution_with_parameters</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">arrival_table_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">routing_expression</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\tentity_class=&lt;class &#x27;src.core.entity.Entity&#x27;&gt;</span>)</span>"}, {"fullname": "src.core.source.Source.sources", "modulename": "src.core.source", "qualname": "Source.sources", "kind": "variable", "doc": "<p>A list of all the sources in the simulation.</p>\n", "default_value": "ResetAbleNamedObjects(0 objects: )"}, {"fullname": "src.core.source.Source.creation_time_dwp", "modulename": "src.core.source", "qualname": "Source.creation_time_dwp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.source.Source.entity_class", "modulename": "src.core.source", "qualname": "Source.entity_class", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.source.Source.action", "modulename": "src.core.source", "qualname": "Source.action", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.source.Source.entities", "modulename": "src.core.source", "qualname": "Source.entities", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.source.Source.entities_created_pivot_table", "modulename": "src.core.source", "qualname": "Source.entities_created_pivot_table", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.source.Source.number_exited_pivot_table", "modulename": "src.core.source", "qualname": "Source.number_exited_pivot_table", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.source.Source.reset", "modulename": "src.core.source", "qualname": "Source.reset", "kind": "function", "doc": "<p>Reset the source. Set the next_component and list of entities to an empty list and reset the entities created.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.source.Source.run", "modulename": "src.core.source", "qualname": "Source.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.source.Source.arrival_table_based_wait_time", "modulename": "src.core.source", "qualname": "Source.arrival_table_based_wait_time", "kind": "function", "doc": "<p>Get the wait time from the arrival table and increment the index for the next wait time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>wait_time</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.core.tally_statistic", "modulename": "src.core.tally_statistic", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.core.tally_statistic.TallyStatistic", "modulename": "src.core.tally_statistic", "qualname": "TallyStatistic", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.core.tally_statistic.TallyStatistic.num_times_processed_list", "modulename": "src.core.tally_statistic", "qualname": "TallyStatistic.num_times_processed_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.core.tally_statistic.TallyStatistic.record", "modulename": "src.core.tally_statistic", "qualname": "TallyStatistic.record", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_times_processed</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.core.tally_statistic.TallyStatistic.calculate_statistics", "modulename": "src.core.tally_statistic", "qualname": "TallyStatistic.calculate_statistics", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.database", "modulename": "src.database", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.database.database_connection", "modulename": "src.database.database_connection", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.database.database_connection.validate_db_config", "modulename": "src.database.database_connection", "qualname": "validate_db_config", "kind": "function", "doc": "<p>Validate that all necessary database configuration variables are set. If not raise a ValueError.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_connection.get_or_create_user", "modulename": "src.database.database_connection", "qualname": "get_or_create_user", "kind": "function", "doc": "<p>Returns the user_id of a user if found, or creates a new user if not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong>:  SQLAlchemy session in which the database is manipulated.</li>\n<li><strong>user_name</strong>:  Username of the current user for the database scheme.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The user_id of the current user.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">user_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_connection.get_or_create_model", "modulename": "src.database.database_connection", "qualname": "get_or_create_model", "kind": "function", "doc": "<p>Returns the model_id of a model if found, or creates a new model if not found.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong>:  SQLAlchemy session in which the database is manipulated.</li>\n<li><strong>model_name</strong>:  Name of the model to be created or used.</li>\n<li><strong>user_id</strong>:  User ID of the current user needed for referencing the correct model.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The Model created or found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Model</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_connection.get_or_create_scenario", "modulename": "src.database.database_connection", "qualname": "get_or_create_scenario", "kind": "function", "doc": "<p>Returns the scenario if it exists, otherwise creates a new one.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong>:  SQLAlchemy session in which the database is manipulated.</li>\n<li><strong>scenario_name</strong>:  Name of the scenario to be created.</li>\n<li><strong>minutes</strong>:  Number of minutes of the simulation, needed for the scenario to be created.</li>\n<li><strong>model_id</strong>:  ID of the model to be created.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The Scenario created or found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">scenario_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">model_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">Scenario</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_connection.connect_to_db", "modulename": "src.database.database_connection", "qualname": "connect_to_db", "kind": "function", "doc": "<p>Attempt to connect to the database and return the engine if successful.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The Engine object if successful, otherwise None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Engine</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_connection.create_session", "modulename": "src.database.database_connection", "qualname": "create_session", "kind": "function", "doc": "<p>Create a session for interacting with the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>engine</strong>:  SQLAlchemy engine for the database.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Session object if the engine was created successfully.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">engine</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">Engine</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_connection.commit_session", "modulename": "src.database.database_connection", "qualname": "commit_session", "kind": "function", "doc": "<p>Commit the session to the database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong>:  SQLAlchemy session in which the database is manipulated.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_connection.get_model_id", "modulename": "src.database.database_connection", "qualname": "get_model_id", "kind": "function", "doc": "<p>Getter for the model_id.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong>:  SQLAlchemy session in which the database is manipulated.</li>\n<li><strong>model_name</strong>:  Name of the model to be retrieved.</li>\n<li><strong>user_id</strong>:  User ID of the current user needed for referencing the correct model.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The model_id of the current model or None if not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_connection.get_scenario_id", "modulename": "src.database.database_connection", "qualname": "get_scenario_id", "kind": "function", "doc": "<p>Return the scenario_id of a scenario if found, or None if not.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong>:  SQLAlchemy session in which the database is manipulated.</li>\n<li><strong>scenario_name</strong>:  Name of the scenario to be retrieved.</li>\n<li><strong>model_id</strong>:  ID of the model to be retrieved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The scenario_id of the current model or None if not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>,</span><span class=\"param\">\t<span class=\"n\">scenario_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_connection.get_user_id", "modulename": "src.database.database_connection", "qualname": "get_user_id", "kind": "function", "doc": "<p>Return the scenario_id of a scenario if found, or None if not.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>session</strong>:  SQLAlchemy session in which the database is manipulated.</li>\n<li><strong>user_name</strong>:  Username of the current user (the one trying to access the database).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">sqlalchemy</span><span class=\"o\">.</span><span class=\"n\">orm</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span>, </span><span class=\"param\"><span class=\"n\">user_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_connection.save_to_db", "modulename": "src.database.database_connection", "qualname": "save_to_db", "kind": "function", "doc": "<p>\"\nThis method interacts with the database to either retrieve or create a user, model, scenario,\nand simulation, ensuring that none are duplicated. It processes data from a pivot table and inserts\neach row as an entry associated with the newly created or retrieved simulation. All changes are\ncommitted to the database, with a rollback in case of any errors.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>combined_pivot</strong>:  Pandas dataframe of the simulation parameters containing all data to be inserted into the database.</li>\n<li><strong>local_start_time</strong>:  Start time of the simulation.</li>\n<li><strong>local_end_time</strong>:  End time of the simulation.</li>\n<li><strong>minutes</strong>:  Number of minutes to simulate.</li>\n<li><strong>num_replications</strong>:  Number of replications.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">combined_pivot</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">local_start_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">local_end_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>,</span><span class=\"param\">\t<span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.database.database_params", "modulename": "src.database.database_params", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.database.generate_db_key", "modulename": "src.database.generate_db_key", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.database.generate_db_key.DB_URL_TEMPLATE", "modulename": "src.database.generate_db_key", "qualname": "DB_URL_TEMPLATE", "kind": "variable", "doc": "<p>Constant for the expected format in the .pgpass file.</p>\n", "annotation": ": str", "default_value": "&#x27;imt-sep-001.lin.hs-osnabrueck.de:55432:distributed_computing:sep:oishooX2iefeiNai&#x27;"}, {"fullname": "src.database.generate_db_key.input_password", "modulename": "src.database.generate_db_key", "qualname": "input_password", "kind": "function", "doc": "<p>Input the password. This is only possible if the console input is possible.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>prompt</strong>:  The password prompt.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The password provided by the user or None if input is not possible.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prompt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Input the password&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.database.generate_db_key.create_pgpass_file", "modulename": "src.database.generate_db_key", "qualname": "create_pgpass_file", "kind": "function", "doc": "<p>Create the .pgpass file needed for passwordless connection to the postgresql database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>template</strong>:  The template for the .pgpass file provided as a constant.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">template</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;imt-sep-001.lin.hs-osnabrueck.de:55432:distributed_computing:sep:oishooX2iefeiNai&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.database.generate_db_key.main", "modulename": "src.database.generate_db_key", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.database.orm", "modulename": "src.database.orm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Base", "modulename": "src.database.orm", "qualname": "Base", "kind": "class", "doc": "<p>Base class for ORM models</p>\n"}, {"fullname": "src.database.orm.Base.__init__", "modulename": "src.database.orm", "qualname": "Base.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.Base.registry", "modulename": "src.database.orm", "qualname": "Base.registry", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqlalchemy.orm.decl_api.registry object&gt;"}, {"fullname": "src.database.orm.Base.metadata", "modulename": "src.database.orm", "qualname": "Base.metadata", "kind": "variable", "doc": "<p></p>\n", "default_value": "MetaData()"}, {"fullname": "src.database.orm.HSUser", "modulename": "src.database.orm", "qualname": "HSUser", "kind": "class", "doc": "<p>Class for User. Needed for referencing the correct Models, Scenario etc.</p>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "src.database.orm.HSUser.__init__", "modulename": "src.database.orm", "qualname": "HSUser.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.HSUser.user_id", "modulename": "src.database.orm", "qualname": "HSUser.user_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.HSUser.user_name", "modulename": "src.database.orm", "qualname": "HSUser.user_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.HSUser.models", "modulename": "src.database.orm", "qualname": "HSUser.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Model", "modulename": "src.database.orm", "qualname": "Model", "kind": "class", "doc": "<p>Class for the Model. A Model is a combination objects.</p>\n\n<p>See also:\n    - <a href=\"../core/model.html#Model\">Model</a>: A simulation model</p>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "src.database.orm.Model.__init__", "modulename": "src.database.orm", "qualname": "Model.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.Model.model_id", "modulename": "src.database.orm", "qualname": "Model.model_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Model.model_name", "modulename": "src.database.orm", "qualname": "Model.model_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.Model.user_id", "modulename": "src.database.orm", "qualname": "Model.user_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Model.hsuser", "modulename": "src.database.orm", "qualname": "Model.hsuser", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Model.scenarios", "modulename": "src.database.orm", "qualname": "Model.scenarios", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Scenario", "modulename": "src.database.orm", "qualname": "Scenario", "kind": "class", "doc": "<p>Class for the Scenario. A Scenario is inside a model.</p>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "src.database.orm.Scenario.__init__", "modulename": "src.database.orm", "qualname": "Scenario.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.Scenario.scenario_id", "modulename": "src.database.orm", "qualname": "Scenario.scenario_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Scenario.scenario_name", "modulename": "src.database.orm", "qualname": "Scenario.scenario_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.Scenario.number_in_system", "modulename": "src.database.orm", "qualname": "Scenario.number_in_system", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Scenario.avg_time_in_system", "modulename": "src.database.orm", "qualname": "Scenario.avg_time_in_system", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Scenario.max_time_in_system", "modulename": "src.database.orm", "qualname": "Scenario.max_time_in_system", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Scenario.min_time_in_system", "modulename": "src.database.orm", "qualname": "Scenario.min_time_in_system", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Scenario.number_created", "modulename": "src.database.orm", "qualname": "Scenario.number_created", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Scenario.number_destroyed", "modulename": "src.database.orm", "qualname": "Scenario.number_destroyed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Scenario.minutes", "modulename": "src.database.orm", "qualname": "Scenario.minutes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Scenario.seed", "modulename": "src.database.orm", "qualname": "Scenario.seed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Scenario.model_id", "modulename": "src.database.orm", "qualname": "Scenario.model_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Scenario.model", "modulename": "src.database.orm", "qualname": "Scenario.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Scenario.sources", "modulename": "src.database.orm", "qualname": "Scenario.sources", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Scenario.sinks", "modulename": "src.database.orm", "qualname": "Scenario.sinks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Scenario.servers", "modulename": "src.database.orm", "qualname": "Scenario.servers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Scenario.connections", "modulename": "src.database.orm", "qualname": "Scenario.connections", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Scenario.entities", "modulename": "src.database.orm", "qualname": "Scenario.entities", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Scenario.simulations", "modulename": "src.database.orm", "qualname": "Scenario.simulations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Source", "modulename": "src.database.orm", "qualname": "Source", "kind": "class", "doc": "<p>Class for the Source. A Source emits entities.</p>\n\n<p>See also:\n    - <a href=\"../core/source.html\">Source</a>: A source is a component that creates entities and routes them to the next component.</p>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "src.database.orm.Source.__init__", "modulename": "src.database.orm", "qualname": "Source.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.Source.source_id", "modulename": "src.database.orm", "qualname": "Source.source_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Source.scenario_id", "modulename": "src.database.orm", "qualname": "Source.scenario_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Source.source_name", "modulename": "src.database.orm", "qualname": "Source.source_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.Source.number_created", "modulename": "src.database.orm", "qualname": "Source.number_created", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Source.number_exited", "modulename": "src.database.orm", "qualname": "Source.number_exited", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Source.creation_time_distribution_with_parameters", "modulename": "src.database.orm", "qualname": "Source.creation_time_distribution_with_parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Source.scenario", "modulename": "src.database.orm", "qualname": "Source.scenario", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Server", "modulename": "src.database.orm", "qualname": "Server", "kind": "class", "doc": "<p>Class for the Server. A Server processes entities.</p>\n\n<p>See also:\n    - <a href=\"../core/server.html\">Server</a>: Represents a server in a simulation environment</p>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "src.database.orm.Server.__init__", "modulename": "src.database.orm", "qualname": "Server.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.Server.server_id", "modulename": "src.database.orm", "qualname": "Server.server_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Server.scenario_id", "modulename": "src.database.orm", "qualname": "Server.scenario_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Server.server_name", "modulename": "src.database.orm", "qualname": "Server.server_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.Server.scheduled_utilization", "modulename": "src.database.orm", "qualname": "Server.scheduled_utilization", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Server.units_utilized", "modulename": "src.database.orm", "qualname": "Server.units_utilized", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Server.avg_time_processing", "modulename": "src.database.orm", "qualname": "Server.avg_time_processing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Server.total_time_processing", "modulename": "src.database.orm", "qualname": "Server.total_time_processing", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Server.number_entered", "modulename": "src.database.orm", "qualname": "Server.number_entered", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Server.number_exited", "modulename": "src.database.orm", "qualname": "Server.number_exited", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Server.number_downtimes", "modulename": "src.database.orm", "qualname": "Server.number_downtimes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Server.total_downtime", "modulename": "src.database.orm", "qualname": "Server.total_downtime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Server.processing_time_distribution_with_parameters", "modulename": "src.database.orm", "qualname": "Server.processing_time_distribution_with_parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Server.time_between_machine_breakdowns", "modulename": "src.database.orm", "qualname": "Server.time_between_machine_breakdowns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Server.machine_breakdown_duration", "modulename": "src.database.orm", "qualname": "Server.machine_breakdown_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Server.entities_processed", "modulename": "src.database.orm", "qualname": "Server.entities_processed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Server.total_uptime", "modulename": "src.database.orm", "qualname": "Server.total_uptime", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Server.number_uptimes", "modulename": "src.database.orm", "qualname": "Server.number_uptimes", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Server.scenario", "modulename": "src.database.orm", "qualname": "Server.scenario", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Sink", "modulename": "src.database.orm", "qualname": "Sink", "kind": "class", "doc": "<p>Class for the Sink.</p>\n\n<p>See also:\n    - <a href=\"../core/sink.html\">Sink</a>: Represents a sink in a simulation environment</p>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "src.database.orm.Sink.__init__", "modulename": "src.database.orm", "qualname": "Sink.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.Sink.sink_id", "modulename": "src.database.orm", "qualname": "Sink.sink_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Sink.scenario_id", "modulename": "src.database.orm", "qualname": "Sink.scenario_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Sink.sink_name", "modulename": "src.database.orm", "qualname": "Sink.sink_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.Sink.entities_processed", "modulename": "src.database.orm", "qualname": "Sink.entities_processed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Sink.total_time_in_system", "modulename": "src.database.orm", "qualname": "Sink.total_time_in_system", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Sink.number_entered", "modulename": "src.database.orm", "qualname": "Sink.number_entered", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Sink.max_time_in_system", "modulename": "src.database.orm", "qualname": "Sink.max_time_in_system", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Sink.min_time_in_system", "modulename": "src.database.orm", "qualname": "Sink.min_time_in_system", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Sink.scenario", "modulename": "src.database.orm", "qualname": "Sink.scenario", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Connection", "modulename": "src.database.orm", "qualname": "Connection", "kind": "class", "doc": "<p>Class for the Connection. A Connection connects to simulation components.</p>\n\n<p>See also:\n    - <a href=\"../core/connection.html\">Connection</a>: Connects simulation components.\n    - <a href=\"../core/routing_object.html\">RoutingObject</a></p>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "src.database.orm.Connection.__init__", "modulename": "src.database.orm", "qualname": "Connection.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.Connection.connection_id", "modulename": "src.database.orm", "qualname": "Connection.connection_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Connection.scenario_id", "modulename": "src.database.orm", "qualname": "Connection.scenario_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Connection.connection_name", "modulename": "src.database.orm", "qualname": "Connection.connection_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.Connection.entities_processed", "modulename": "src.database.orm", "qualname": "Connection.entities_processed", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Connection.number_entered", "modulename": "src.database.orm", "qualname": "Connection.number_entered", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Connection.processing_duration", "modulename": "src.database.orm", "qualname": "Connection.processing_duration", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Connection.availability", "modulename": "src.database.orm", "qualname": "Connection.availability", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Connection.scenario", "modulename": "src.database.orm", "qualname": "Connection.scenario", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.Entity", "modulename": "src.database.orm", "qualname": "Entity", "kind": "class", "doc": "<p>Class for the Entity.</p>\n\n<p>See also:\n    - <a href=\"../core/entity.html\">Entity</a></p>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "src.database.orm.Entity.__init__", "modulename": "src.database.orm", "qualname": "Entity.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.Entity.entity_id", "modulename": "src.database.orm", "qualname": "Entity.entity_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Entity.scenario_id", "modulename": "src.database.orm", "qualname": "Entity.scenario_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Entity.entity_name", "modulename": "src.database.orm", "qualname": "Entity.entity_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.Entity.creation_time", "modulename": "src.database.orm", "qualname": "Entity.creation_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Entity.scenario", "modulename": "src.database.orm", "qualname": "Entity.scenario", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.PivotTable", "modulename": "src.database.orm", "qualname": "PivotTable", "kind": "class", "doc": "<p>Class for the PivotTable. The PivotTable stores the most important simulation results.</p>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "src.database.orm.PivotTable.__init__", "modulename": "src.database.orm", "qualname": "PivotTable.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.PivotTable.pivot_table_id", "modulename": "src.database.orm", "qualname": "PivotTable.pivot_table_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.PivotTable.simulation_id", "modulename": "src.database.orm", "qualname": "PivotTable.simulation_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.PivotTable.type", "modulename": "src.database.orm", "qualname": "PivotTable.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.PivotTable.name", "modulename": "src.database.orm", "qualname": "PivotTable.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.PivotTable.stat", "modulename": "src.database.orm", "qualname": "PivotTable.stat", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "src.database.orm.PivotTable.average", "modulename": "src.database.orm", "qualname": "PivotTable.average", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.PivotTable.minimum", "modulename": "src.database.orm", "qualname": "PivotTable.minimum", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.PivotTable.maximum", "modulename": "src.database.orm", "qualname": "PivotTable.maximum", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.PivotTable.half_width", "modulename": "src.database.orm", "qualname": "PivotTable.half_width", "kind": "variable", "doc": "<p></p>\n", "annotation": ": float"}, {"fullname": "src.database.orm.Simulation", "modulename": "src.database.orm", "qualname": "Simulation", "kind": "class", "doc": "<p>Class for the Simulation. A Simulation is inside a Scenario and simply represents multiple runs.</p>\n", "bases": "sqlalchemy.orm.decl_api.Base"}, {"fullname": "src.database.orm.Simulation.__init__", "modulename": "src.database.orm", "qualname": "Simulation.__init__", "kind": "function", "doc": "<p>A simple constructor that allows initialization from kwargs.</p>\n\n<p>Sets attributes on the constructed instance using the names and\nvalues in <code>kwargs</code>.</p>\n\n<p>Only keys that are present as\nattributes of the instance's class are allowed. These could be,\nfor example, any mapped columns or relationships.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.database.orm.Simulation.simulation_id", "modulename": "src.database.orm", "qualname": "Simulation.simulation_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Simulation.local_start_time", "modulename": "src.database.orm", "qualname": "Simulation.local_start_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.database.orm.Simulation.local_end_time", "modulename": "src.database.orm", "qualname": "Simulation.local_end_time", "kind": "variable", "doc": "<p></p>\n", "annotation": ": datetime.datetime"}, {"fullname": "src.database.orm.Simulation.num_replications", "modulename": "src.database.orm", "qualname": "Simulation.num_replications", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Simulation.scenario_id", "modulename": "src.database.orm", "qualname": "Simulation.scenario_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int"}, {"fullname": "src.database.orm.Simulation.scenario", "modulename": "src.database.orm", "qualname": "Simulation.scenario", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.database.orm.create_tables", "modulename": "src.database.orm", "qualname": "create_tables", "kind": "function", "doc": "<p>Creates all tables from the classes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.database.orm.main", "modulename": "src.database.orm", "qualname": "main", "kind": "function", "doc": "<p>Main function to connect to the database and create the database scheme. Starting by making an engine,\ncreating the tables, then creating a session and finally commiting.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models", "modulename": "src.models", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.main", "modulename": "src.models.main", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.main.main", "modulename": "src.models.main", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model4_1", "modulename": "src.models.model4_1", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.model4_1.setup_model4_1", "modulename": "src.models.model4_1", "qualname": "setup_model4_1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model4_1.main", "modulename": "src.models.model4_1", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model5_1", "modulename": "src.models.model5_1", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.model5_1.setup_model5_1", "modulename": "src.models.model5_1", "qualname": "setup_model5_1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model5_1.main", "modulename": "src.models.model5_1", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_builder", "modulename": "src.models.model_builder", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.model_builder.get_component_id", "modulename": "src.models.model_builder", "qualname": "get_component_id", "kind": "function", "doc": "<p>Get the unique ID for a component.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>component_config</strong>:  Dictionary containing the component's configuration.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The unique ID for the component, defaults to 'name' if 'id' is not provided.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">component_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_builder.resolve_arrival_table_path", "modulename": "src.models.model_builder", "qualname": "resolve_arrival_table_path", "kind": "function", "doc": "<p>Resolve the absolute path for the arrival table if needed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>flask_base_path</strong>:  The base path where Flask application data is stored.</li>\n<li><strong>arrival_table_path</strong>:  The path to the arrival table, which may be relative or absolute.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Absolute path to the arrival table, or the input path if it's already absolute.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">flask_base_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">arrival_table_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_builder.create_source", "modulename": "src.models.model_builder", "qualname": "create_source", "kind": "function", "doc": "<p>Create a Source component from the source configuration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env</strong>:  Simpy environment in which the source component will operate.</li>\n<li><strong>source_config</strong>:  Dictionary containing the configuration for the source.</li>\n<li><strong>flask_base_path</strong>:  Base path for the Flask application, used to resolve arrival table paths.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple containing the unique ID of the source component and the Source object.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../core/source.html\">Source</a>: A source is a component that creates entities and routes them to the next component.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">simpy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">source_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">flask_base_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;src.core.source.Source&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_builder.create_server", "modulename": "src.models.model_builder", "qualname": "create_server", "kind": "function", "doc": "<p>Create a Server component from the server configuration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env</strong>:  Simpy environment in which the server component will operate.</li>\n<li><strong>server_config</strong>:  Dictionary containing the configuration for the server.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>UniqueID and Server object</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../core/server.html\">Server</a>: Represents a server in a simulation environment.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">simpy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">server_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;src.core.server.Server&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_builder.create_sink", "modulename": "src.models.model_builder", "qualname": "create_sink", "kind": "function", "doc": "<p>Create a Sink component from the sink configuration.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env</strong>:  Simpy environment in which the server component will operate.</li>\n<li><strong>sink_config</strong>:  Dictionary containing the configuration for the sink.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>UniqueID and Sink object</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../core/sink.html\">Sink</a>: Represents a sink in a simulation environment.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">simpy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Environment</span>,</span><span class=\"param\">\t<span class=\"n\">sink_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;src.core.sink.Sink&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_builder.setup_connections", "modulename": "src.models.model_builder", "qualname": "setup_connections", "kind": "function", "doc": "<p>Set up connections for the given component.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>components</strong>:  Dictionary containing all components and their ids.</li>\n<li><strong>component_config</strong>:  Dictionary containing the component's configuration.</li>\n</ul>\n\n<p>See also:\n    - <a href=\"../core/connection.html\">Connection</a>: Connects simulation components.\n    - <a href=\"../core/routing_object.html\">RoutingObject</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">components</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>, </span><span class=\"param\"><span class=\"n\">component_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_builder.model_function", "modulename": "src.models.model_builder", "qualname": "model_function", "kind": "function", "doc": "<p>Build a model from the provided configuration file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env</strong>:  Simpy environment of the simulation</li>\n</ul>\n\n<p>See also:\n    - <a href=\"../core/source.html\">Source</a>\n    - <a href=\"../core/server.html\">Server</a>\n    - <a href=\"../core/sink.html\">Sink</a>\n    - <a href=\"../core/routing_object.html\">RoutingObject</a>\n    - <a href=\"../core/model.html#Model\">Model</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span><span class=\"p\">:</span> <span class=\"n\">simpy</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">Environment</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_builder.get_distribution", "modulename": "src.models.model_builder", "qualname": "get_distribution", "kind": "function", "doc": "<p>Get the distribution with parameters from the configuration file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>distribution_config</strong>:  Dictionary containing the parameters for the distribution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">distribution_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"p\">(</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"bp\">Ellipsis</span><span class=\"p\">)</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_builder.get_config_path", "modulename": "src.models.model_builder", "qualname": "get_config_path", "kind": "function", "doc": "<p>Get the path to the configuration file stored in the environment variables.\nThis is necessary because multiple processes are accessing this variable.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Path to the configuration file.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_builder.main", "modulename": "src.models.model_builder", "qualname": "main", "kind": "function", "doc": "<p>Run the model builder.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>replications</strong>:  Number of replications for the simulation</li>\n</ul>\n\n<p>See also:\n    - <a href=\"../util/simulations.html#run_replications\">run_replications</a>: Run replications of a model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_pcb", "modulename": "src.models.model_pcb", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.model_pcb.record_times_processed", "modulename": "src.models.model_pcb", "qualname": "record_times_processed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">routing_object</span>, </span><span class=\"param\"><span class=\"n\">entity</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">parameters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_pcb.routing_rework_limitation", "modulename": "src.models.model_pcb", "qualname": "routing_rework_limitation", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">routing_object</span>, </span><span class=\"param\"><span class=\"n\">entity</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">parameters</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_pcb.setup_model_pcb", "modulename": "src.models.model_pcb", "qualname": "setup_model_pcb", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_pcb.main", "modulename": "src.models.model_pcb", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_pcb_with_arrival_table", "modulename": "src.models.model_pcb_with_arrival_table", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.model_pcb_with_arrival_table.setup_model_pcb_with_arrival_table", "modulename": "src.models.model_pcb_with_arrival_table", "qualname": "setup_model_pcb_with_arrival_table", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_pcb_with_arrival_table.main", "modulename": "src.models.model_pcb_with_arrival_table", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_pcb_with_breakdowns", "modulename": "src.models.model_pcb_with_breakdowns", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.model_pcb_with_breakdowns.setup_model_pcb_with_breakdowns", "modulename": "src.models.model_pcb_with_breakdowns", "qualname": "setup_model_pcb_with_breakdowns", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_pcb_with_breakdowns.main", "modulename": "src.models.model_pcb_with_breakdowns", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_work_schedule", "modulename": "src.models.model_work_schedule", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.models.model_work_schedule.setup_work_schedule", "modulename": "src.models.model_work_schedule", "qualname": "setup_work_schedule", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.models.model_work_schedule.main", "modulename": "src.models.model_work_schedule", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util", "modulename": "src.util", "kind": "module", "doc": "<p>The util directory hosts utility modules and functions that support the simulation framework.</p>\n\n<pre><code>date_time.py: This module offers utilities for managing date and time-related functionalities within the simulation environment. It facilitates tasks like computing time intervals and formatting timestamps to suit the simulation's requirements. The core functionalities include setting the initial date and time, retrieving the current date and time, mapping time components to different units (such as seconds, minutes, or hours), and calculating delta times relative to the initial date. By encapsulating these operations, the module enhances the simulation framework's flexibility and adaptability to various time-based scenarios.\n\nglobal_imports.py: The code sets up configurations for a simulation framework. It imports necessary modules, defines custom logging levels, initializes a random seed, and configures logging. It also defines a class Stats as a Singleton to store detailed statistics for simulation runs.\n\nhelper.py: The Helper module serves as a repository for diverse helper functions and utilities crucial for common tasks within the simulation framework. It encapsulates functionalities ranging from generating random numbers to conducting statistical calculations, enhancing the overall efficiency and versatility of the simulation process. This module integrates essential components like probability validation, logging customization, value rounding, and distribution parameter retrieval, facilitating seamless operation and management of simulation entities and processes.\n\nsimulations.py: This module serves as a repository for predefined simulation scenarios or experiments within the simulation framework. Here, users can access ready-to-use simulation setups designed to leverage the core components of the framework. These simulations are crafted to cater to various testing or analysis needs, offering a convenient platform for researchers and practitioners to explore and experiment with different system configurations and parameters.\n\nsingleton.py: The Singleton module provides an implementation of the Singleton design pattern, ensuring that specific classes within the simulation have only one instance throughout the runtime. This is achieved using a custom metaclass Singleton, which controls the instantiation process, ensuring that only a single instance of the class is created and reused whenever needed.\n\nvisualization.py: This module hosts utilities for creating visual representations of simulation results or system dynamics.  It has tools to create different kinds visualizations, ranging from scatterplots and histograms to boxplots and violin plots.\n</code></pre>\n"}, {"fullname": "src.util.date_time", "modulename": "src.util.date_time", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.date_time.TimeComponent", "modulename": "src.util.date_time", "qualname": "TimeComponent", "kind": "class", "doc": "<p>An Enum representing basic units of time.</p>\n", "bases": "enum.Enum"}, {"fullname": "src.util.date_time.TimeComponent.second", "modulename": "src.util.date_time", "qualname": "TimeComponent.second", "kind": "variable", "doc": "<p>A second, represented by the value <code>1</code>, as the fundamental unit of time.</p>\n", "default_value": "&lt;TimeComponent.second: 1&gt;"}, {"fullname": "src.util.date_time.TimeComponent.minute", "modulename": "src.util.date_time", "qualname": "TimeComponent.minute", "kind": "variable", "doc": "<p>A minute, converted to seconds (<code>60</code>), for representing time intervals in minutes.</p>\n", "default_value": "&lt;TimeComponent.minute: 60&gt;"}, {"fullname": "src.util.date_time.TimeComponent.hour", "modulename": "src.util.date_time", "qualname": "TimeComponent.hour", "kind": "variable", "doc": "<p>An hour, converted to seconds (<code>3600</code>), allows for specifying time intervals in hours.</p>\n", "default_value": "&lt;TimeComponent.hour: (3600,)&gt;"}, {"fullname": "src.util.date_time.TimeComponent.day", "modulename": "src.util.date_time", "qualname": "TimeComponent.day", "kind": "variable", "doc": "<p>A day, converted to seconds (<code>86400</code>), allows for specifying time intervals in days.</p>\n", "default_value": "&lt;TimeComponent.day: 86400&gt;"}, {"fullname": "src.util.date_time.TimeComponent.week", "modulename": "src.util.date_time", "qualname": "TimeComponent.week", "kind": "variable", "doc": "<p>A week, converted to seconds (<code>604800</code>), allows for specifying time intervals in weeks.</p>\n", "default_value": "&lt;TimeComponent.week: 604800&gt;"}, {"fullname": "src.util.date_time.DateTime", "modulename": "src.util.date_time", "qualname": "DateTime", "kind": "class", "doc": "<p>A singleton class representing a date and time.</p>\n", "bases": "src.util.singleton.Singleton"}, {"fullname": "src.util.date_time.DateTime.initial_date_time", "modulename": "src.util.date_time", "qualname": "DateTime.initial_date_time", "kind": "variable", "doc": "<p>The set date and time when the object is created.</p>\n", "default_value": "datetime.datetime(2024, 10, 10, 18, 12, 26, 581367)"}, {"fullname": "src.util.date_time.DateTime.simpy_time_mapped_to", "modulename": "src.util.date_time", "qualname": "DateTime.simpy_time_mapped_to", "kind": "variable", "doc": "<p>The mapped time in minutes.</p>\n", "default_value": "&lt;TimeComponent.minute: 60&gt;"}, {"fullname": "src.util.date_time.DateTime.set", "modulename": "src.util.date_time", "qualname": "DateTime.set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">initial_date_time</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.date_time.DateTime.get", "modulename": "src.util.date_time", "qualname": "DateTime.get", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_now</strong>: </li>\n<li><strong>from_initial_date</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Returns a delta between <code>time_now</code> and <code>from_initial_date</code> if from_initial_date is set</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">time_now</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">time_string_from_initial_date</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">get_weekday_hour_minute</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.date_time.DateTime.map", "modulename": "src.util.date_time", "qualname": "DateTime.map", "kind": "function", "doc": "<p>Maps the simpy time component to either seconds, minutes or hours</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_component</strong>: </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">time_component</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">date_time</span><span class=\"o\">.</span><span class=\"n\">TimeComponent</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.date_time.DateTime.map_time_to_steps", "modulename": "src.util.date_time", "qualname": "DateTime.map_time_to_steps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">day</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">hour</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">minute</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">second</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask", "modulename": "src.util.flask", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.app", "modulename": "src.util.flask.app", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.app.app", "modulename": "src.util.flask.app", "qualname": "app", "kind": "variable", "doc": "<p>Initialize the flask app.</p>\n", "default_value": "&lt;Flask &#x27;src.util.flask.app&#x27;&gt;"}, {"fullname": "src.util.flask.app.USER_DIR", "modulename": "src.util.flask.app", "qualname": "USER_DIR", "kind": "variable", "doc": "<p>User directory. Each user gets their own subdirectory.</p>\n", "default_value": "&#x27;E:\\\\projects\\\\SEP_DMPG\\\\src\\\\util\\\\flask/user&#x27;"}, {"fullname": "src.util.flask.app.user_trees", "modulename": "src.util.flask.app", "qualname": "user_trees", "kind": "variable", "doc": "<p>Composite tree of each user stored here.</p>\n", "annotation": ": dict[str, typing.Optional[src.util.flask.nodes_for_composite.ManagementNode]]", "default_value": "{}"}, {"fullname": "src.util.flask.app.index", "modulename": "src.util.flask.app", "qualname": "index", "kind": "function", "doc": "<p>Redirects to appropriate site if Base-URL is requested.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.login_required", "modulename": "src.util.flask.app", "qualname": "login_required", "kind": "function", "doc": "<p>Decorator to ensure that the site is only available to logged-in users. If the username is not present in the\nsession, the user will be redirected to the login page.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>f</strong>:  The route function to be decorated,</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Function that wraps the decorated function and ensures only logged-in users can access.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.check_valid_username", "modulename": "src.util.flask.app", "qualname": "check_valid_username", "kind": "function", "doc": "<p>Checks the username for @ so only username and not email is allowed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>username</strong>:  The username to be checked.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A boolean indicating if the user is valid or not.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">login</a>: Function to log in</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.login", "modulename": "src.util.flask.app", "qualname": "login", "kind": "function", "doc": "<p>Handles login process. On a GET request the login form is rendered. On a POST request the login is being processed.\nThe login will set up an SSH connection and create a user folder. After successful login the user is redirected\nto the dashboard.</p>\n\n<p>See also:\n    - <a href=\"../flask/ssh_setup.html#setup_ssh_connection\">setup_ssh_connection</a>: Function to set up SSH connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.dashboard", "modulename": "src.util.flask.app", "qualname": "dashboard", "kind": "function", "doc": "<p>The dashboard will be rendered. User has to be logged in.</p>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.logout", "modulename": "src.util.flask.app", "qualname": "logout", "kind": "function", "doc": "<p>Logs out the current user and redirects to the login page. User has to be logged in.</p>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.settings", "modulename": "src.util.flask.app", "qualname": "settings", "kind": "function", "doc": "<p>Renders the template for settings. User has to be logged in.</p>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.new_job", "modulename": "src.util.flask.app", "qualname": "new_job", "kind": "function", "doc": "<p>Renders the template for a new job. User has to be logged in.</p>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.contact", "modulename": "src.util.flask.app", "qualname": "contact", "kind": "function", "doc": "<p>Renders the template for contact. User has to be logged in.</p>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.visualization", "modulename": "src.util.flask.app", "qualname": "visualization", "kind": "function", "doc": "<p>Renders the template for visualization. User has to be logged in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The template and the url to grafana with the current username.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.experimental_environment", "modulename": "src.util.flask.app", "qualname": "experimental_environment", "kind": "function", "doc": "<p>Handle the experiment environment of the current user. For GET requests, it displays the page with the user's\nexisting configurations. For POST requests, it processes form data to create or overwrite a configuration.\nUser has to be logged in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The rendered template or redirect response to the experimental environment page.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/flask/app.html#get_user_configuration\">get_user_configuration</a>: Retrieve all simulation configurations of a user.\n    - <a href=\"../util/flask/app.html#get_model_and_scenario_names\">get_model_and_scenario_names</a>: Retrieve model and scenario names.\n    - <a href=\"../util/flask/app.html#define_config_paths\">define_config_paths</a>: Define configuration paths.\n    - <a href=\"../util/flask/app.html#check_overwrite\">check_overwrite</a>: Check overwrite.\n    - <a href=\"../util/flask/app.html#process_form_inputs\">process_form_inputs</a>: Process the (previously entered) form data.\n    - <a href=\"../util/flask/experiments.html#generate_simulation_configuration\">generate_simulation_configuration</a>: Generate a configuration file for a scenario.\n    - <a href=\"../util/flask/app.html#save_configuration\">save_configuration</a>: Save the configuration file.\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.get_user_configurations", "modulename": "src.util.flask.app", "qualname": "get_user_configurations", "kind": "function", "doc": "<p>Retrieve existing configurations from the current user's directory.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>user_directory</strong>:  The current user's directory.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of dictionaries containing the configurations.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">user_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.get_model_and_scenario_names", "modulename": "src.util.flask.app", "qualname": "get_model_and_scenario_names", "kind": "function", "doc": "<p>Extract original and new model and scenario names from form data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data from the html input.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple containing the original and new model and scenario names.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">form_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.define_config_paths", "modulename": "src.util.flask.app", "qualname": "define_config_paths", "kind": "function", "doc": "<p>Define the configuration directory and file paths.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>username</strong>:  The current user's username.</li>\n<li><strong>model_name</strong>:  The model name provided by the user in the html form.</li>\n<li><strong>scenario_name</strong>:  The scenario name provided by the user in the html form.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple containing the configuration directory and file paths.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scenario_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.check_overwrite", "modulename": "src.util.flask.app", "qualname": "check_overwrite", "kind": "function", "doc": "<p>Check if the configuration file already exists and overwrite if user confirmed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data from the html input.</li>\n<li><strong>config_file_path</strong>:  The configuration file path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Either None or a tuple containing the render template and the form data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">form_data</span>, </span><span class=\"param\"><span class=\"n\">config_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.process_form_inputs", "modulename": "src.util.flask.app", "qualname": "process_form_inputs", "kind": "function", "doc": "<p>Process all form inputs and handle arrival tables for each source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data from the html input.</li>\n<li><strong>files_data</strong>:  The files uploaded by the user.</li>\n<li><strong>model_name</strong>:  The new model name provided by the user in the html form.</li>\n<li><strong>scenario_name</strong>:  The new scenario name provided by the user in the html form.</li>\n<li><strong>username</strong>:  The current user's username.</li>\n<li><strong>original_model_name</strong>:  The original model name.</li>\n<li><strong>original_scenario_name</strong>:  The original scenario name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary mapping the component IDs to the arrival tables.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../core/source.html\">Source</a>: Source in a simulation environment.\n    - <a href=\"../util/flask/app.html#process_source\">process_source</a>: Process sources and their arrival table.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">form_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">files_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">werkzeug</span><span class=\"o\">.</span><span class=\"n\">datastructures</span><span class=\"o\">.</span><span class=\"n\">file_storage</span><span class=\"o\">.</span><span class=\"n\">FileStorage</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scenario_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">original_model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">original_scenario_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.process_source", "modulename": "src.util.flask.app", "qualname": "process_source", "kind": "function", "doc": "<p>Process each source and their arrival table. Manipulate the file path if necessary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>unique_id</strong>:  The unique ID of the source.</li>\n<li><strong>source_name</strong>:  The name of the source.</li>\n<li><strong>form_data</strong>:  The form data from the html input.</li>\n<li><strong>files_data</strong>:  The files uploaded by the user.</li>\n<li><strong>model_name</strong>:  The new model name provided by the user in the html form.</li>\n<li><strong>scenario_name</strong>:  The new scenario name provided by the user in the html form.</li>\n<li><strong>username</strong>:  The current user's username.</li>\n<li><strong>original_model_name</strong>:  The original model name.</li>\n<li><strong>original_scenario_name</strong>:  The original scenario name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The file path of the arrival table or None if no arrival table was provided.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/flask/experiments.html#save_arrival_table\">save_arrival_table</a>: Save the provided arrival table.\n    - <a href=\"../util/flask/experiments.html#copy_arrival_table\">copy_arrival_table</a>: Copy the provided arrival table to another scenario.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">unique_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">source_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">form_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">files_data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">werkzeug</span><span class=\"o\">.</span><span class=\"n\">datastructures</span><span class=\"o\">.</span><span class=\"n\">file_storage</span><span class=\"o\">.</span><span class=\"n\">FileStorage</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scenario_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">original_model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">original_scenario_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.save_configuration", "modulename": "src.util.flask.app", "qualname": "save_configuration", "kind": "function", "doc": "<p>Save the generated configuration file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_json</strong>:  The configuration file in a json form.</li>\n<li><strong>user_directory</strong>:  The user directory path.</li>\n<li><strong>model_name</strong>:  The new model name provided by the user in the html form.</li>\n<li><strong>scenario_name</strong>:  The new scenario name provided by the user in the html form.</li>\n</ul>\n\n<p>See also:\n    - <a href=\"../util/flask/experiments.html#save_config_file\">save_config_file</a>:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_json</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">user_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scenario_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.cancel_overwrite", "modulename": "src.util.flask.app", "qualname": "cancel_overwrite", "kind": "function", "doc": "<p>Cancel the overwrite of a configuration file. User has to be logged in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Redirect to the experimental environment, so it's a response.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.load_configuration", "modulename": "src.util.flask.app", "qualname": "load_configuration", "kind": "function", "doc": "<p>Handle a POST request to load a previously generated configuration file.\nA user is only be able to load their own scenarios. User has to be logged in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Redirect to the experimental environment, so it's a response.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.delete_scenario", "modulename": "src.util.flask.app", "qualname": "delete_scenario", "kind": "function", "doc": "<p>Delete a scenario configuration file. A user can only delete their own scenarios. User has to be logged in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Redirect to the experimental environment, so it's a response.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.receive_runtime_prediction", "modulename": "src.util.flask.app", "qualname": "receive_runtime_prediction", "kind": "function", "doc": "<p>Receive a runtime prediction from the slurm cluster as a POST request and save the file.\nThe user doesn't have to be logged in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A response and an int providing the status.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> (&lt;class &#x27;flask.wrappers.Response&#x27;&gt;, &lt;class &#x27;int&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.show_runtime_prediction", "modulename": "src.util.flask.app", "qualname": "show_runtime_prediction", "kind": "function", "doc": "<p>Route to show the runtime prediction received from the Slurm cluster. User has to be logged in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Render runtime prediction with user and data.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, typing.Optional[typing.Any]):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.prepare_env_route", "modulename": "src.util.flask.app", "qualname": "prepare_env_route", "kind": "function", "doc": "<p>Handle a POST request to prepare the environment for the user on the remote. User has to be logged in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Redirect to the submit job route.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../util/flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.\n    - <a href=\"../util/flask/environment.html#prepare_env\">prepare_env</a>: Function to prepare the environment for the user on the remote.\n    - <a href=\"../util/flask/ssh_setup.html#setup_ssh_connection\">setup_ssh_connection</a>: Function to set up the ssh connection and return an SSH client.\n    - <a href=\"../util/flask/environment.html#transfer_experiments\">transfer_experiments</a>: Function to transfer the simulation configuration files to the remote.\n    - <a href=\"../util/flask/environment.html#create_db_key_on__remote\">create_db_key_on_remote</a>: Function to send the database creation script to the remote.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.submit_job", "modulename": "src.util.flask.app", "qualname": "submit_job", "kind": "function", "doc": "<p>Handle the submission of jobs by users. On GET request, it displays the job submission page,\nincluding any existing JSON files and compute nodes. On POST request, it processes form data to either\ncreate a composite tree or start a simulation. User has to be logged in.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A rendered template or redirect response.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/flask/app.html#login\">Login</a>: Function to log in.\n    - <a href=\"../util/flask/app.html#login_required\">Login required</a>: Decorator to ensure login is required.\n    - <a href=\"../util/flask/ssh_setup.html#setup_ssh_connection\">setup_ssh_connection</a>: Set up SSH connection and returns it.\n    - <a href=\"../util/flask/app.html#get_jwt_token\">get_jwt_token</a>: Retrieve a JWT token from the slurm cluster.\n    - <a href=\"../util/flask/app.html#initialize_user_tree\">initialize_user_tree</a>: Initialize the user tree and returns it.\n    - <a href=\"../util/flask/app.html#find_json_files\">find_json_files</a>: Find all JSON configuration files associated with the user.\n    - <a href=\"../util/flask/app.html#get_num_compute_nodes\">get_num_compute_nodes</a>: Get the number of compute nodes available.\n    - <a href=\"../util/flask/app.html#get_user_accounts\">get_user_accounts</a>: Retrieve the list of all user accounts on the slurm.\n    - <a href=\"../util/flask/app.html#handle_create_tree\">handle_create_tree</a>: Handle the creation of a tree.\n    - <a href=\"../util/flask/app.html#handle_start_simulation\">handle_start_simulation</a>: Handle the start of simulations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.get_jwt_token", "modulename": "src.util.flask.app", "qualname": "get_jwt_token", "kind": "function", "doc": "<p>Obtain a JWT token from the slurm cluster using an SSH client.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  The SSH client connected to the remote server.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The JWT token as a string.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/flask/environment.html#execute_command\">execute_command</a>: Execute the command on the remote.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.initialize_user_tree", "modulename": "src.util.flask.app", "qualname": "initialize_user_tree", "kind": "function", "doc": "<p>Initialize the user's composite tree if it doesn't exist.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>username</strong>:  The username of the current user.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.get_num_compute_nodes", "modulename": "src.util.flask.app", "qualname": "get_num_compute_nodes", "kind": "function", "doc": "<p>Get the number of not running compute nodes in the user's composite tree.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>username</strong>:  The username of the current user.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The number of compute nodes.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/flask/composite_tree.html\">CompositeTree</a>: Composite Pattern to submit jobs.\n    - <a href=\"../util/flask/composite_tree.html#count_not_running_compute_nodes\">count_not_running_compute_nodes</a>: Get the number of inactive compute nodes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.get_user_accounts", "modulename": "src.util.flask.app", "qualname": "get_user_accounts", "kind": "function", "doc": "<p>Retrieve Slurm accounts for the given user via SSH.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  The SSH client connected to the remote server.</li>\n<li><strong>username</strong>:  The username of the current user.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of account names.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/flask/environment.html#execute_command\">execute_command</a>: Execute the command on the remote.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.handle_create_tree", "modulename": "src.util.flask.app", "qualname": "handle_create_tree", "kind": "function", "doc": "<p>Handle the creation of a composite tree for the user.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>username</strong>:  The username of the current user.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A redirect response to the submit_job page.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/flask/composite_tree.html\">CompositeTree</a>: Composite Pattern to submit jobs.\n    - <a href=\"../util/flask/composite_tree.html#create_custom_composite_tree_with_params\">create_custom_composite_tree_with_params</a>: Create a custom composite tree.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">wrappers</span><span class=\"o\">.</span><span class=\"n\">Response</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.handle_start_simulation", "modulename": "src.util.flask.app", "qualname": "handle_start_simulation", "kind": "function", "doc": "<p>Handle starting the simulation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>username</strong>:  The username of the current user.</li>\n<li><strong>jwt_token</strong>:  The JWT token obtained via SSH.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A redirect response to the show_runtime_prediction page.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/flask/app.html#get_num_compute_nodes\">get_num_compute_nodes</a>: Get the number of inactive compute nodes.\n    - <a href=\"../util/flask/environment.html#manipulate_scenario_path\">manipulate_scenario_path</a>: Manipulate the scenario path.\n    - <a href=\"../util/flask/app.html#start_simulation_in_thread\">start_simulation_in_thread</a>: Start the simulation in a thread.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">jwt_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.start_simulation_in_thread", "modulename": "src.util.flask.app", "qualname": "start_simulation_in_thread", "kind": "function", "doc": "<p>Start the simulation in a separate thread.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>username</strong>:  The username of the current user.</li>\n<li><strong>num_replications_per_node</strong>:  Number of replications per compute node.</li>\n<li><strong>selected_account</strong>:  The selected Slurm account.</li>\n<li><strong>slurm_username</strong>:  The Slurm username.</li>\n<li><strong>model_script</strong>:  The model script path.</li>\n<li><strong>manipulated_model_script</strong>:  The manipulated model script path.</li>\n<li><strong>time_limit</strong>:  The time limit for the simulation.</li>\n<li><strong>jwt_token</strong>:  The JWT token obtained via SSH.</li>\n<li><strong>cpus_per_task</strong>:  Number of CPUs per task for the simulation.</li>\n</ul>\n\n<p>See also:\n    - <a href=\"../util/flask/composite_tree.html\">CompositeTree</a>: Composite Pattern to submit jobs.\n    - <a href=\"../util/flask/nodes_for_composite.html#distribute_and_compute\">distribute_and_compute</a>:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">num_replications_per_node</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">selected_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_script</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">manipulated_model_script</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">time_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">jwt_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cpus_per_task</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.app.find_json_files", "modulename": "src.util.flask.app", "qualname": "find_json_files", "kind": "function", "doc": "<p>Searches subdirectory for json files recursively.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>directory</strong>:  The directory to search for json files.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of dictionaries containing the json filenames and the full path.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree", "modulename": "src.util.flask.composite_tree", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.composite_tree.CompositeTree", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree", "kind": "class", "doc": "<p>The CompositeTree class is used to distribute simulations to multiple jobs. It consists of a root that is always a\nManagementNode in our case (and many other Management Nodes) but also Compute Nodes. The metaclass is Singleton as\nthere always only should be one CompositeTree for one user.</p>\n\n<p>See also:\n    -<a href=\"../util/flask/nodes_for_composite.html#ManagementNode\">ManagementNode</a>\n    -<a href=\"../util/flask/nodes_for_composite.html#ComputeNode\">ComputeNode</a>\n    -<a href=\"../util/singleton.html#Singleton\">Singleton</a></p>\n"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.get_root", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.get_root", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">ManagementNode</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.destroy_composite_tree", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.destroy_composite_tree", "kind": "function", "doc": "<p>\"Reset/Destroy\" the CompositeTree</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.get_replications_per_node", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.get_replications_per_node", "kind": "function", "doc": "<p>Get the replications per ComputeNode</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.set_replications_per_node", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.set_replications_per_node", "kind": "function", "doc": "<p>Set the replications per ComputeNode</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">num_replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.create_custom_composite_tree", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.create_custom_composite_tree", "kind": "function", "doc": "<p>Create a custom composite tree with user input. A tree is symmetric since another form wouldn't make more sense.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.create_custom_composite_tree_with_params", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.create_custom_composite_tree_with_params", "kind": "function", "doc": "<p>Create a custom composite tree with the provided number of children per parent and tree depth.\nReturns the root of the created tree.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">num_children_per_parent</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">depth_of_tree</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">ManagementNode</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.NewJobFileHandler", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.NewJobFileHandler", "kind": "class", "doc": "<p>Handles events when a new job file is created. Works with a daemon to prevent polling.</p>\n", "bases": "watchdog.events.FileSystemEventHandler"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.NewJobFileHandler.on_created", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.NewJobFileHandler.on_created", "kind": "function", "doc": "<p>Called when a file or directory is created.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>event</strong>: \nEvent representing file/directory creation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">event</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.visualize_tree", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.visualize_tree", "kind": "function", "doc": "<p>Visualize the tree and save it as a PNG file in the specified output path.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;src/util/flask&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.add_node_interactively", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.add_node_interactively", "kind": "function", "doc": "<p>Interactively adds a node to the tree based on its name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.remove_node_interactively", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.remove_node_interactively", "kind": "function", "doc": "<p>Interactively removes a node from the tree based on its name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.count_compute_nodes", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.count_compute_nodes", "kind": "function", "doc": "<p>Counts the number of ComputeNodes under the given ManagementNode. There is a local function to do it\nrecursively.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">management_node</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">ManagementNode</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.count_not_running_compute_nodes", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.count_not_running_compute_nodes", "kind": "function", "doc": "<p>Counts the number of ComputeNodes that are not running under the given ManagementNode. There is a local\nfunction to do it recursively.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">management_node</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">ManagementNode</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.handle_node_callback", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.handle_node_callback", "kind": "function", "doc": "<p>Callback handler that sets the 'running' flag of the given ComputeNode to False.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>node_name</strong>:  The name of the ComputeNode that finished its task.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">node_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.confirm_input", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.confirm_input", "kind": "function", "doc": "<p>User is prompted to confirm input by pressing \"y\".</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prompt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Please confirm your input&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.CompositeTree.start_simulation", "modulename": "src.util.flask.composite_tree", "qualname": "CompositeTree.start_simulation", "kind": "function", "doc": "<p>Starts the simulation from the root node.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>num_replications</strong>:  The total number of replication to simulate.</li>\n<li><strong>num_compute_nodes</strong>:  The number of compute nodes to simulate on.</li>\n<li><strong>slurm_account</strong>:  The Slurm account to be billed.</li>\n<li><strong>slurm_username</strong>:  The Slurm username to be used.</li>\n<li><strong>model_script</strong>:  The model script to be used.</li>\n<li><strong>time_limit</strong>:  The time limit for the Slurm job in minutes.</li>\n<li><strong>cpus_per_task</strong>:  Number of CPUs per task for the simulation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">num_replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_compute_nodes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_script</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">time_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">cpus_per_task</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.composite_tree.main", "modulename": "src.util.flask.composite_tree", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment", "modulename": "src.util.flask.environment", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.environment.transfer_dmpg_folder", "modulename": "src.util.flask.environment", "qualname": "transfer_dmpg_folder", "kind": "function", "doc": "<p>Transfer the DMPG folder to the remote.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  SSHClient connected to the remote.</li>\n<li><strong>local_folder_path</strong>:  Local DMPG folder path.</li>\n<li><strong>remote_folder_path</strong>:  Remote DMPG folder path.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">local_folder_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">remote_folder_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.ensure_remote_directory", "modulename": "src.util.flask.environment", "qualname": "ensure_remote_directory", "kind": "function", "doc": "<p>Ensure the remote directory exists, creating it if necessary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sftp</strong>:  SFTPClient connected to the remote.</li>\n<li><strong>remote_path</strong>:  Remote directory path.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sftp</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">sftp_client</span><span class=\"o\">.</span><span class=\"n\">SFTPClient</span>, </span><span class=\"param\"><span class=\"n\">remote_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.read_version_from_file", "modulename": "src.util.flask.environment", "qualname": "read_version_from_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.execute_command", "modulename": "src.util.flask.environment", "qualname": "execute_command", "kind": "function", "doc": "<p>Execute a command on the remote host and return the output of the command.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  SSHClient connected to the remote.</li>\n<li><strong>command</strong>:  Command to execute.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.check_venv_exists", "modulename": "src.util.flask.environment", "qualname": "check_venv_exists", "kind": "function", "doc": "<p>Check if the virtual environment exists on the remote.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  SSHClient connected to the remote.</li>\n<li><strong>venv_path</strong>:  Path to the virtual environment.</li>\n<li><strong>env_activation_command</strong>:  Command to activate the virtual environment.</li>\n<li><strong>required_version</strong>:  Required version of python.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the virtual environment exists and matches the required version on the remote, False otherwise.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">venv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">env_activation_command</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">required_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.create_venv", "modulename": "src.util.flask.environment", "qualname": "create_venv", "kind": "function", "doc": "<p>Create a virtual environment on the remote.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  SSHClient connected to the remote.</li>\n<li><strong>venv_path</strong>:  Path to the virtual environment.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>, </span><span class=\"param\"><span class=\"n\">venv_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.install_libraries", "modulename": "src.util.flask.environment", "qualname": "install_libraries", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">requirements_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">env_activation_command</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.read_json", "modulename": "src.util.flask.environment", "qualname": "read_json", "kind": "function", "doc": "<p>Helper function to read config.json</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.prepare_env", "modulename": "src.util.flask.environment", "qualname": "prepare_env", "kind": "function", "doc": "<p>Function to prepare the environment on the remote. Meaning correct python with venv and DMPG on the remote.\nThe replacement is because the environment variable user couldn't be expanded.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>username</strong>:  Username of the user who wants to prepare the environment.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.transfer_experiments", "modulename": "src.util.flask.environment", "qualname": "transfer_experiments", "kind": "function", "doc": "<p>Upload the configuration files of the simulation to the remote.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">local_model_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.upload_directory", "modulename": "src.util.flask.environment", "qualname": "upload_directory", "kind": "function", "doc": "<p>Recursively upload a directory and its contents to the remote directory.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sftp</strong>:  The active SFTP session</li>\n<li><strong>local_dir</strong>:  The local directory to upload</li>\n<li><strong>remote_dir</strong>:  The remote directory to upload to</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sftp</span>, </span><span class=\"param\"><span class=\"n\">local_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">remote_dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.manipulate_arrival_table_path", "modulename": "src.util.flask.environment", "qualname": "manipulate_arrival_table_path", "kind": "function", "doc": "<p>Manipulate the arrival table path of the sources arrival tables to fit the clusters directory. Use posix to ensure\nno problems with (back-)slashes based on different os.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>json_path</strong>:  The json file path to the simulation configuration.</li>\n<li><strong>remote_path</strong>:  The remote path to change the arrival tables path to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">json_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">remote_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.manipulate_scenario_path", "modulename": "src.util.flask.environment", "qualname": "manipulate_scenario_path", "kind": "function", "doc": "<p>Changes path from {app.root_path}/user/{user}/{model}/{scenario}/{filename}\nto /cluster/user/$USER/DMPG_experiments/{model}/{scenario}/arrival_tables/{filename}.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">original_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">source_base_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">destination_base_path_template</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.create_db_key_on_remote", "modulename": "src.util.flask.environment", "qualname": "create_db_key_on_remote", "kind": "function", "doc": "<p>Create the .pgpass on the remote.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  The active SSH session.</li>\n<li><strong>local_path</strong>:  The local file to upload.</li>\n<li><strong>remote_path</strong>:  The remote file to upload to.</li>\n</ul>\n\n<p>See also:\n    -<a href=\"../util/flask/environment.html#send_file_to_remote\">send_file_to_remote</a>: Sends a file to the remote.\n    -<a href=\"../util/flask/environment.html#run_remote_python_script\">run_remote_python_script</a>: Runs a python script on the remote.\n    -<a href=\"../util/flask/environment.html#remove_remote_file\">remove_remote_file</a>: Removes a file on the remote.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">local_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">remote_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.send_file_to_remote", "modulename": "src.util.flask.environment", "qualname": "send_file_to_remote", "kind": "function", "doc": "<p>Sends a file to the remote via sftp.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  The active SSH session.</li>\n<li><strong>local_path</strong>:  The local file to upload.</li>\n<li><strong>remote_path</strong>:  The remote file to upload to.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">local_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">remote_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.run_remote_python_script", "modulename": "src.util.flask.environment", "qualname": "run_remote_python_script", "kind": "function", "doc": "<p>Run a python script on the remote.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  The active SSH session.</li>\n<li><strong>remote_path</strong>:  The remote file to run.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>, </span><span class=\"param\"><span class=\"n\">remote_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.environment.remove_remote_file", "modulename": "src.util.flask.environment", "qualname": "remove_remote_file", "kind": "function", "doc": "<p>Remove a file on the remote.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  The active SSH session.</li>\n<li><strong>remote_path</strong>:  The remote file to delete.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>, </span><span class=\"param\"><span class=\"n\">remote_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments", "modulename": "src.util.flask.experiments", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.experiments.generate_simulation_configuration", "modulename": "src.util.flask.experiments", "qualname": "generate_simulation_configuration", "kind": "function", "doc": "<p>Generate a simulation configuration file from the form data provided in the html.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data provided in the html form.</li>\n<li><strong>source_files</strong>:  A dictionary mapping the component IDs to the arrival tables.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The simulation configuration file as a string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">form_data</span>, </span><span class=\"param\"><span class=\"n\">source_files</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.process_sources", "modulename": "src.util.flask.experiments", "qualname": "process_sources", "kind": "function", "doc": "<p>Process the sources provided in the form data provided in the html form with their corresponding arrival tables.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data provided in the html form.</li>\n<li><strong>source_files</strong>:  A dictionary mapping the component IDs to the arrival tables.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list containing all sources.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../core/source.html\">Source</a>\n    - <a href=\"../util/flask/experiments.html#get_distribution_params\">get_distribution_params</a>\n    - <a href=\"../util/flask/experiments.html#process_connections\">process_connections</a></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">form_data</span>,</span><span class=\"param\">\t<span class=\"n\">source_files</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"kc\">None</span> <span class=\"o\">|</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.process_servers", "modulename": "src.util.flask.experiments", "qualname": "process_servers", "kind": "function", "doc": "<p>Process the servers provided in the form data provided in the html form.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data provided in the html form.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list containing all servers.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../core/server.html\">Server</a>\n    - <a href=\"../util/flask/experiments.html#get_distribution_params\">get_distribution_params</a>\n    - <a href=\"../util/flask/experiments.html#get_breakdown_params\">get_breakdown_params</a>\n    - <a href=\"../util/flask/experiments.html#process_connections\">process_connections</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">form_data</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.process_sinks", "modulename": "src.util.flask.experiments", "qualname": "process_sinks", "kind": "function", "doc": "<p>Process the sinks provided in the form data provided in the html form.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data provided in the html form.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list containing all sinks.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../core/sink.html\">Sink</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">form_data</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.get_distribution_params", "modulename": "src.util.flask.experiments", "qualname": "get_distribution_params", "kind": "function", "doc": "<p>Retrieve the distribution parameters for a specific component.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data provided in the html form.</li>\n<li><strong>unique_id</strong>:  The unique ID of the component.</li>\n<li><strong>dist_type</strong>:  The type of distribution.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The distribution parameters.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/helper.html#get_value_from_distribution_with_parameters\">get_value_from_distribution_with_parameters</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">form_data</span>, </span><span class=\"param\"><span class=\"n\">unique_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dist_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.get_breakdown_params", "modulename": "src.util.flask.experiments", "qualname": "get_breakdown_params", "kind": "function", "doc": "<p>Get the breakdown parameters from the form data for a specific component.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data provided in the html form.</li>\n<li><strong>unique_id</strong>:  The unique ID of the component.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">form_data</span>, </span><span class=\"param\"><span class=\"n\">unique_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.get_breakdown_distribution_params", "modulename": "src.util.flask.experiments", "qualname": "get_breakdown_distribution_params", "kind": "function", "doc": "<p>Get the breakdown parameters from the form data for a specific component.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data provided in the html form.</li>\n<li><strong>unique_id</strong>:  The unique ID of the component.</li>\n<li><strong>prefix</strong>:  The prefix of the breakdown parameter.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The breakdown parameters in a dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">form_data</span>, </span><span class=\"param\"><span class=\"n\">unique_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">prefix</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.process_connections", "modulename": "src.util.flask.experiments", "qualname": "process_connections", "kind": "function", "doc": "<p>Process the connections between components based on the form data.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>form_data</strong>:  The form data provided in the html form.</li>\n<li><strong>unique_id</strong>:  The unique ID of the component.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The connections between components based on the form data in a dictionary.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../core/connections.html\">Connections</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">form_data</span>, </span><span class=\"param\"><span class=\"n\">unique_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.save_config_file", "modulename": "src.util.flask.experiments", "qualname": "save_config_file", "kind": "function", "doc": "<p>Save the configuration file to a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_json</strong>:  The configuration file as a string.</li>\n<li><strong>path</strong>:  The path where the configuration file should be saved.</li>\n<li><strong>filename</strong>:  The name of the configuration file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_json</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.save_arrival_table", "modulename": "src.util.flask.experiments", "qualname": "save_arrival_table", "kind": "function", "doc": "<p>Save the arrival table to a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>arrival_table_file</strong>:  The arrival table as a file.</li>\n<li><strong>model_name</strong>:  The name of the model.</li>\n<li><strong>scenario_name</strong>:  The name of the scenario.</li>\n<li><strong>user_directory</strong>:  The user directory on the server.</li>\n<li><strong>source_name</strong>:  The name of the source corresponding to the arrival table.</li>\n<li><strong>username</strong>:  The name of the user who wants to save the arrival table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The path to the saved arrival table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">arrival_table_file</span><span class=\"p\">:</span> <span class=\"n\">werkzeug</span><span class=\"o\">.</span><span class=\"n\">datastructures</span><span class=\"o\">.</span><span class=\"n\">file_storage</span><span class=\"o\">.</span><span class=\"n\">FileStorage</span>,</span><span class=\"param\">\t<span class=\"n\">model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scenario_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">source_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">user_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.copy_arrival_table", "modulename": "src.util.flask.experiments", "qualname": "copy_arrival_table", "kind": "function", "doc": "<p>Copy an arrival table to another scenario.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>existing_file_path</strong>:  The path to the existing arrival table.</li>\n<li><strong>new_model_name</strong>:  The name of the new model.</li>\n<li><strong>new_scenario_name</strong>:  The name of the new scenario.</li>\n<li><strong>source_name</strong>:  The name of the source corresponding to the arrival table.</li>\n<li><strong>username</strong>:  The name of the user who wants to save the arrival table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The path to the saved arrival table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">existing_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">new_model_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">new_scenario_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">source_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.experiments.check_filename", "modulename": "src.util.flask.experiments", "qualname": "check_filename", "kind": "function", "doc": "<p>Check the filename for the source name and add it if necessary.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong>:  The name of the file.</li>\n<li><strong>filename_without_ext_normalized</strong>:  The name of the file without extension.</li>\n<li><strong>source_name</strong>:  The name of the source corresponding to the arrival table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The new path to the saved arrival table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">filename_without_ext_normalized</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">source_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.job", "modulename": "src.util.flask.job", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.job.submit_slurm_job", "modulename": "src.util.flask.job", "qualname": "submit_slurm_job", "kind": "function", "doc": "<p>Sends a slurm job to Slurm for computation via REST-API</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>slurm_username</strong>:  The Slurm username.</li>\n<li><strong>slurm_account</strong>:  The Slurm account.</li>\n<li><strong>slurm_jwt</strong>:  The JWT token for authentication.</li>\n<li><strong>job_name</strong>:  The name of the job (of the ComputeNode).</li>\n<li><strong>base_url</strong>:  The base URL of the Slurm REST API.</li>\n<li><strong>model_script</strong>:  The path to the model script.</li>\n<li><strong>replications</strong>:  The number of replications to pass to the model.</li>\n<li><strong>time_limit_minutes</strong>:  The time limit of the job in minutes. Defaults to 10.</li>\n<li><strong>partition</strong>:  The partition where the job will run. Defaults to \"compute\".</li>\n<li><strong>cpus_per_task</strong>:  Number of CPUs per task. Defaults to 4.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A message indicating success with the job ID or an error message.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">slurm_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_jwt</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">job_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">base_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">model_script</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">time_limit_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">partition</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;compute&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">cpus_per_task</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.job.prepare_job_data", "modulename": "src.util.flask.job", "qualname": "prepare_job_data", "kind": "function", "doc": "<p>Prepare the job data for the Slurm REST API.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>job_name</strong>:  The name of the job.</li>\n<li><strong>slurm_account</strong>:  The Slurm account.</li>\n<li><strong>slurm_username</strong>:  The Slurm username.</li>\n<li><strong>cpus_per_task</strong>:  Number of CPUs per task.</li>\n<li><strong>model_script</strong>:  The path to the model script.</li>\n<li><strong>replications</strong>:  The number of replications.</li>\n<li><strong>time_limit_minutes</strong>:  The time limit of the job in minutes.</li>\n<li><strong>partition</strong>:  The partition where the job will run.</li>\n<li><strong>current_working_directory</strong>:  The working directory for the job.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The job data dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">job_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cpus_per_task</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">model_script</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">time_limit_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">partition</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">current_working_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.job.generate_job_script", "modulename": "src.util.flask.job", "qualname": "generate_job_script", "kind": "function", "doc": "<p>Generate the Slurm job script.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>job_name</strong>:  The name of the job.</li>\n<li><strong>slurm_account</strong>:  The Slurm account.</li>\n<li><strong>slurm_username</strong>:  The Slurm username.</li>\n<li><strong>cpus_per_task</strong>:  Number of CPUs per task.</li>\n<li><strong>model_script</strong>:  The path to the model script.</li>\n<li><strong>replications</strong>:  The number of replications.</li>\n<li><strong>time_limit_minutes</strong>:  The time limit of the job in minutes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The job script as a string.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">job_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">cpus_per_task</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">model_script</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">time_limit_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.monitoring", "modulename": "src.util.flask.monitoring", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.monitoring.monitor_resources", "modulename": "src.util.flask.monitoring", "qualname": "monitor_resources", "kind": "function", "doc": "<p>Monitor resource usage rudimentary based on psutil. The usages will be printed in an interval.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>interval</strong>:  Interval in which the monitoring should be done in seconds.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">30</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite", "modulename": "src.util.flask.nodes_for_composite", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.nodes_for_composite.MINIMUM_OF_REPLICATIONS_FOR_COMPOSITE", "modulename": "src.util.flask.nodes_for_composite", "qualname": "MINIMUM_OF_REPLICATIONS_FOR_COMPOSITE", "kind": "variable", "doc": "<p>Exemplary and not necessary but nice to have</p>\n", "annotation": ": int", "default_value": "1000"}, {"fullname": "src.util.flask.nodes_for_composite.Node", "modulename": "src.util.flask.nodes_for_composite", "qualname": "Node", "kind": "class", "doc": "<p>Abstract base class for all Node Objects.</p>\n", "bases": "abc.ABC"}, {"fullname": "src.util.flask.nodes_for_composite.Node.distribute_and_compute", "modulename": "src.util.flask.nodes_for_composite", "qualname": "Node.distribute_and_compute", "kind": "function", "doc": "<p>Distribute or compute. The Node will interpret the command correctly by type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model to simulate.</li>\n<li><strong>num_replications</strong>:  Number of replications.</li>\n<li><strong>slurm_account</strong>:  Slurm account name.</li>\n<li><strong>model_script</strong>:  Model script.</li>\n<li><strong>time_limit</strong>:  Time limit for the Slurm job.</li>\n<li><strong>slurm_username</strong>:  Slurm username.</li>\n<li><strong>jwt_token</strong>:  JWT token needed for job submission via REST-API.</li>\n<li><strong>cpus_per_task</strong>:  Number of CPUs per task for the simulation.</li>\n</ul>\n\n<p>See also:\n    - <a href=\"../util/flask/nodes_for_composite.html#ManagementNode\">ManagementNode</a>: Node to manage workload.\n    - <a href=\"../util/flask/nodes_for_composite.html#ComputeNode\">ComputeNode</a>: Node to compute the simulation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">num_replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_script</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">jwt_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cpus_per_task</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.Node.get_parent", "modulename": "src.util.flask.nodes_for_composite", "qualname": "Node.get_parent", "kind": "function", "doc": "<p>Returns the parent of the Node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">ManagementNode</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.Node.set_parent", "modulename": "src.util.flask.nodes_for_composite", "qualname": "Node.set_parent", "kind": "function", "doc": "<p>Sets the parent of the Node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">ManagementNode</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.ManagementNode", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ManagementNode", "kind": "class", "doc": "<p>Node for distributing workload to compute Nodes.</p>\n\n<p>See also:\n    - <a href=\"../util/flask/nodes_for_composite.html#Node\">Node</a>: Abstract base class for all Node Objects.</p>\n", "bases": "Node"}, {"fullname": "src.util.flask.nodes_for_composite.ManagementNode.__init__", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ManagementNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">ManagementNode</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.util.flask.nodes_for_composite.ManagementNode.distribute_and_compute", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ManagementNode.distribute_and_compute", "kind": "function", "doc": "<p>Distribute workload to compute Nodes by recursively calling this method on the children.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model to simulate.</li>\n<li><strong>num_replications</strong>:  Number of replications.</li>\n<li><strong>slurm_account</strong>:  Slurm account name.</li>\n<li><strong>model_script</strong>:  Model script.</li>\n<li><strong>time_limit</strong>:  Time limit for the Slurm job.</li>\n<li><strong>slurm_username</strong>:  Slurm username.</li>\n<li><strong>jwt_token</strong>:  JWT token needed for job submission via REST-API.</li>\n<li><strong>cpus_per_task</strong>:  Number of CPUs per task for the simulation.</li>\n</ul>\n\n<p>See also:\n    - <a href=\"../util/flask/nodes_for_composite.html#Node\">Node</a>: Abstract base class for a Node.\n    - <a href=\"../util/flask/nodes_for_composite.html#ComputeNode\">ComputeNode</a>: Node to compute the simulation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">num_replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_script</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">jwt_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cpus_per_task</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.ManagementNode.get_number_of_children", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ManagementNode.get_number_of_children", "kind": "function", "doc": "<p>Returns the number of children of the Node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.ManagementNode.add", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ManagementNode.add", "kind": "function", "doc": "<p>Add a Node to the list of children.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">component</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">Node</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.ManagementNode.remove", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ManagementNode.remove", "kind": "function", "doc": "<p>Remove a Node from the list of children.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">component</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">Node</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.ManagementNode.notify", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ManagementNode.notify", "kind": "function", "doc": "<p>Exemplary implementation for a notification if the Slurm job is completed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong>:  e.g. \"Completed the Slurm job\"</li>\n<li><strong>node</strong>:  sender of the notification</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">ManagementNode</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.ManagementNode.count_compute_nodes", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ManagementNode.count_compute_nodes", "kind": "function", "doc": "<p>Count the number of compute nodes and return it.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.ComputeNode", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ComputeNode", "kind": "class", "doc": "<p>Node for computing/submitting a slurm job.</p>\n\n<p>See also:\n    - <a href=\"../util/flask/nodes_for_composite.html#Node\">Node</a>: Abstract base class for all Node Objects.</p>\n", "bases": "Node"}, {"fullname": "src.util.flask.nodes_for_composite.ComputeNode.__init__", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ComputeNode.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "src.util.flask.nodes_for_composite.ComputeNode.callback", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ComputeNode.callback", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.nodes_for_composite.ComputeNode.is_running", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ComputeNode.is_running", "kind": "function", "doc": "<p>Checks if the compute node is running and returns a bool.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.ComputeNode.set_running", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ComputeNode.set_running", "kind": "function", "doc": "<p>Set the running flag for the compute node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.ComputeNode.distribute_and_compute", "modulename": "src.util.flask.nodes_for_composite", "qualname": "ComputeNode.distribute_and_compute", "kind": "function", "doc": "<p>Submit a slurm job to simulate.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model to simulate.</li>\n<li><strong>num_replications</strong>:  Number of replications.</li>\n<li><strong>slurm_account</strong>:  Slurm account name.</li>\n<li><strong>model_script</strong>:  Model script.</li>\n<li><strong>time_limit</strong>:  Time limit for the Slurm job.</li>\n<li><strong>slurm_username</strong>:  Slurm username.</li>\n<li><strong>jwt_token</strong>:  JWT token needed for job submission via REST-API.</li>\n<li><strong>cpus_per_task</strong>:  Number of CPUs per task for the simulation.</li>\n</ul>\n\n<p>See also:\n    - <a href=\"../util/flask/nodes_for_composite.html#Node\">Node</a>: Abstract base class for a Node.\n    - <a href=\"../util/flask/nodes_for_composite.html#ManagementNode\">ManagementNode</a>: Node to distribute the simulation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">num_replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_account</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_script</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">slurm_username</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">jwt_token</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cpus_per_task</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.input_positive_number", "modulename": "src.util.flask.nodes_for_composite", "qualname": "input_positive_number", "kind": "function", "doc": "<p>Helper function to input a positive number.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">prompt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Please enter a positive number&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.create_composite_tree", "modulename": "src.util.flask.nodes_for_composite", "qualname": "create_composite_tree", "kind": "function", "doc": "<p>!!!Depreciated!!!\nCreate a composite tree of Management and Compute Nodes based on a given number of replications.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>num_replications</strong>:  Number of replications needed</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The root of the tree with a whole tree below itself</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">ManagementNode</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.add_nodes_for_default", "modulename": "src.util.flask.nodes_for_composite", "qualname": "add_nodes_for_default", "kind": "function", "doc": "<p>!!!Depreciated!!!\nAdds nodes for the default tree.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent</span><span class=\"p\">:</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">flask</span><span class=\"o\">.</span><span class=\"n\">nodes_for_composite</span><span class=\"o\">.</span><span class=\"n\">ManagementNode</span>,</span><span class=\"param\">\t<span class=\"n\">current_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">max_depth</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.nodes_for_composite.compute_tree_sizes", "modulename": "src.util.flask.nodes_for_composite", "qualname": "compute_tree_sizes", "kind": "function", "doc": "<p>!!!Depreciated!!!\nComputes the tree size of a default tree.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.runtime_prediction", "modulename": "src.util.flask.runtime_prediction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.runtime_prediction.URL", "modulename": "src.util.flask.runtime_prediction", "qualname": "URL", "kind": "variable", "doc": "<p>URL to send the runtime prediction to.</p>\n", "default_value": "&#x27;https://imt-sep-001.lin.hs-osnabrueck.de/receive_runtime_prediction&#x27;"}, {"fullname": "src.util.flask.runtime_prediction.send_progress_to_server", "modulename": "src.util.flask.runtime_prediction", "qualname": "send_progress_to_server", "kind": "function", "doc": "<p>Send the simulation progress to the server.</p>\n\n<p>:params ct: A tuple containing formatted strings for percentage completion and time metrics.\n:params i: The current iteration number.\n:params num_replications: The total number of replications.</p>\n\n<p>See also:\n    - <a href=\"../util/flask/runtime_prediction.html#save_progress\">save_progress</a>: Save Progress in a dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tct: (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;),</span><span class=\"param\">\t<span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.runtime_prediction.save_progress", "modulename": "src.util.flask.runtime_prediction", "qualname": "save_progress", "kind": "function", "doc": "<p>Save the current progress as a dictionary.</p>\n\n<p>:params ct: A tuple containing formatted strings for percentage completion and time metrics.\n:params i: The current iteration number.\n:params num_replications: The total number of replications.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the data.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\tct: (&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;),</span><span class=\"param\">\t<span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">num_replications</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_params", "modulename": "src.util.flask.ssh_params", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.ssh_setup", "modulename": "src.util.flask.ssh_setup", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.ssh_setup.generate_ssh_key", "modulename": "src.util.flask.ssh_setup", "qualname": "generate_ssh_key", "kind": "function", "doc": "<p>Generate an SSH key and save it in key_path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>key_path</strong>:  Where the key should be stored.</li>\n<li><strong>comment</strong>:  Comment for the key.</li>\n<li><strong>passphrase</strong>:  Passphrase for the key.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">comment</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">passphrase</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_setup.send_public_key_to_server", "modulename": "src.util.flask.ssh_setup", "qualname": "send_public_key_to_server", "kind": "function", "doc": "<p>Send the public SSH key to the server.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  Active SSH connection to remote.</li>\n<li><strong>public_key</strong>:  The public SSH key.</li>\n<li><strong>username</strong>:  The username to send the public key to.</li>\n<li><strong>remote_host</strong>:  The remote host to send the public key to.</li>\n<li><strong>remote_key_path</strong>:  The path to the public key on the remote.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">public_key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">remote_host</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">remote_key_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_setup.setup_ssh_connection", "modulename": "src.util.flask.ssh_setup", "qualname": "setup_ssh_connection", "kind": "function", "doc": "<p>Sets up an SSH connection for a user and return the client.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>username</strong>:  The username to connect as.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The SSH client.</p>\n</blockquote>\n\n<p>See also:\n    - <a href=\"../util/flask/ssh_setup.html#generate_ssh_key\">generate_ssh_key</a>: Generate an SSH key and save it.\n    - <a href=\"../util/flask/ssh_setup.html#send_public_key_to_server\">send_public_key_to_server</a>: Send the public key to the server.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_setup.close_ssh_connection", "modulename": "src.util.flask.ssh_setup", "qualname": "close_ssh_connection", "kind": "function", "doc": "<p>Close the SSH client.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ssh_client</strong>:  Active SSH connection to remote.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_with_parameters", "modulename": "src.util.flask.ssh_with_parameters", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.flask.ssh_with_parameters.create_ssh_client", "modulename": "src.util.flask.ssh_with_parameters", "qualname": "create_ssh_client", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">user</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_with_parameters.transfer_folder", "modulename": "src.util.flask.ssh_with_parameters", "qualname": "transfer_folder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">local_folder_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">remote_folder_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_with_parameters.select_folder", "modulename": "src.util.flask.ssh_with_parameters", "qualname": "select_folder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_with_parameters.read_version_from_file", "modulename": "src.util.flask.ssh_with_parameters", "qualname": "read_version_from_file", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_with_parameters.execute_command", "modulename": "src.util.flask.ssh_with_parameters", "qualname": "execute_command", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>, </span><span class=\"param\"><span class=\"n\">command</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_with_parameters.check_python_version", "modulename": "src.util.flask.ssh_with_parameters", "qualname": "check_python_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">required_version</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">env_activation_command</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_with_parameters.install_libraries", "modulename": "src.util.flask.ssh_with_parameters", "qualname": "install_libraries", "kind": "function", "doc": "<h1 id=\"activate-the-python-environment\">Activate the Python environment</h1>\n\n<p>with open(requirements_file, 'r') as file:\n    libraries = file.read().splitlines()\nfor library in libraries:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ssh_client</span><span class=\"p\">:</span> <span class=\"n\">paramiko</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">SSHClient</span>,</span><span class=\"param\">\t<span class=\"n\">requirements_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">env_activation_command</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_with_parameters.read_json", "modulename": "src.util.flask.ssh_with_parameters", "qualname": "read_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_with_parameters.get_private_config", "modulename": "src.util.flask.ssh_with_parameters", "qualname": "get_private_config", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.flask.ssh_with_parameters.main", "modulename": "src.util.flask.ssh_with_parameters", "qualname": "main", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.global_imports", "modulename": "src.util.global_imports", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.global_imports.RANDOM_SEED", "modulename": "src.util.global_imports", "qualname": "RANDOM_SEED", "kind": "variable", "doc": "<p></p>\n", "default_value": "1"}, {"fullname": "src.util.global_imports.DURATION_WARM_UP", "modulename": "src.util.global_imports", "qualname": "DURATION_WARM_UP", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "src.util.global_imports.DAYS_PER_WEEK", "modulename": "src.util.global_imports", "qualname": "DAYS_PER_WEEK", "kind": "variable", "doc": "<p></p>\n", "default_value": "7"}, {"fullname": "src.util.global_imports.HOURS_PER_DAY", "modulename": "src.util.global_imports", "qualname": "HOURS_PER_DAY", "kind": "variable", "doc": "<p></p>\n", "default_value": "24"}, {"fullname": "src.util.global_imports.MINUTES_PER_HOUR", "modulename": "src.util.global_imports", "qualname": "MINUTES_PER_HOUR", "kind": "variable", "doc": "<p></p>\n", "default_value": "60"}, {"fullname": "src.util.global_imports.SECONDS_PER_MINUTE", "modulename": "src.util.global_imports", "qualname": "SECONDS_PER_MINUTE", "kind": "variable", "doc": "<p></p>\n", "default_value": "60"}, {"fullname": "src.util.global_imports.ENTITY_PROCESSING_LOG_ENTRY", "modulename": "src.util.global_imports", "qualname": "ENTITY_PROCESSING_LOG_ENTRY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;{:&lt;120} at {}&#x27;"}, {"fullname": "src.util.global_imports.Stats", "modulename": "src.util.global_imports", "qualname": "Stats", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.util.global_imports.Stats.all_detailed_stats", "modulename": "src.util.global_imports", "qualname": "Stats.all_detailed_stats", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "src.util.global_imports.set_duration_warm_up", "modulename": "src.util.global_imports", "qualname": "set_duration_warm_up", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.helper", "modulename": "src.util.helper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.helper.ROUND_DECIMAL_PLACES", "modulename": "src.util.helper", "qualname": "ROUND_DECIMAL_PLACES", "kind": "variable", "doc": "<p></p>\n", "default_value": "4"}, {"fullname": "src.util.helper.load_config", "modulename": "src.util.helper", "qualname": "load_config", "kind": "function", "doc": "<p>Load configuration from the specified file path.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_path</strong>:  Path to the configuration file as a string or bytes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Parsed JSON content of the configuration file as a dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.helper.get_value_from_distribution_with_parameters", "modulename": "src.util.helper", "qualname": "get_value_from_distribution_with_parameters", "kind": "function", "doc": "<p>Get a value from a distribution with parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>dwp</strong>:  Tuple of distribution function and parameters</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Value from the distribution</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dwp</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.helper.validate_probabilities", "modulename": "src.util.helper", "qualname": "validate_probabilities", "kind": "function", "doc": "<p>Validate probabilities for the next component of a source.\nIf the probabilities are not specified, they are divided equally among the unspecified components.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>component</strong>: </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">component</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.helper.create_connection_cache", "modulename": "src.util.helper", "qualname": "create_connection_cache", "kind": "function", "doc": "<p>Create a cache for a given component which cumulates the probability of all given servers.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>component</strong>: </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">component</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.helper.add_logging_level", "modulename": "src.util.helper", "qualname": "add_logging_level", "kind": "function", "doc": "<p>Comprehensively adds a new logging level to the <code>logging</code> module and the\ncurrently configured logging class.</p>\n\n<p><code>levelName</code> becomes an attribute of the <code>logging</code> module with the value\n<code>levelNum</code>. <code>methodName</code> becomes a convenience method for both <code>logging</code>\nitself and the class returned by <code>logging.getLoggerClass()</code> (usually just\n<code>logging.Logger</code>). If <code>methodName</code> is not specified, <code>levelName.lower()</code> is\nused.</p>\n\n<p>To avoid accidental clobberings of existing attributes, this method will\nraise an <code>AttributeError</code> if the level name is already an attribute of the\n<code>logging</code> module or if the method name is already present</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>level_name</strong>:  The name of the logging level to add</li>\n<li><strong>level_num</strong>:  The number of the logging level to add</li>\n<li><strong>method_name</strong>:  The name of the logging method. Default = None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level_name</span>, </span><span class=\"param\"><span class=\"n\">level_num</span>, </span><span class=\"param\"><span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.helper.round_value", "modulename": "src.util.helper", "qualname": "round_value", "kind": "function", "doc": "<p>Rounds value</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>val</strong>:  value</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>rounded value either int or float</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.simulations", "modulename": "src.util.simulations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.simulations.run_simulation", "modulename": "src.util.simulations", "qualname": "run_simulation", "kind": "function", "doc": "<p>Run a simulation using the specified model for the given number of minutes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model (Callable)</strong>:  The simulation model function.</li>\n<li><strong>minutes (int)</strong>:  The number of minutes to run the simulation.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The pivot</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">warm_up</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">store_pivot_in_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.simulations.calculate_units_utilized", "modulename": "src.util.simulations", "qualname": "calculate_units_utilized", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">units_utilized_over_time</span>, </span><span class=\"param\"><span class=\"n\">capacity</span>, </span><span class=\"param\"><span class=\"n\">time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.simulations.calculate_statistics", "modulename": "src.util.simulations", "qualname": "calculate_statistics", "kind": "function", "doc": "<p>Calculate various statistics based on the simulation environment.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env</strong>:  The simulation environment.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple containing dictionaries for entity, server, sink,\n   and source statistics.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">env</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.simulations.replication", "modulename": "src.util.simulations", "qualname": "replication", "kind": "function", "doc": "<p>Replicate a simulation run.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>env_setup_func (Callable)</strong>:  A function that sets up the simulation environment.</li>\n<li><strong>calculate_stats_func (Callable)</strong>:  A function that calculates statistics based on the simulation environment.</li>\n<li><strong>minutes (int)</strong>:  The number of minutes to run the replication.</li>\n<li><strong>r (int)</strong>:  iteration.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple containing dictionaries for entity, server, sink, and source statistics.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">env_setup_func</span>,</span><span class=\"param\">\t<span class=\"n\">calculate_stats_func</span>,</span><span class=\"param\">\t<span class=\"n\">minutes</span>,</span><span class=\"param\">\t<span class=\"n\">r</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.simulations.get_percentage_and_computingtimes", "modulename": "src.util.simulations", "qualname": "get_percentage_and_computingtimes", "kind": "function", "doc": "<p>Calculate the percentage completion and various time metrics for a set of replications.</p>\n\n<p>param: computing_time_start (float): The start time of the computation.\nparam: i (int): The current iteration number.\nparam: num_replications (int): The total number of replications.</p>\n\n<p>return: Tuple[Dict, List[Dict], Dict, Dict]: A tuple containing formatted strings for percentage completion and time metrics.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">computing_time_start</span>,</span><span class=\"param\">\t<span class=\"n\">i</span>,</span><span class=\"param\">\t<span class=\"n\">num_replications</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.simulations.run_replications", "modulename": "src.util.simulations", "qualname": "run_replications", "kind": "function", "doc": "<p>Run multiple replications of a simulation and collect statistics.</p>\n\n<p>param: model (Callable): The simulation model function.\nparam: minutes (int): The number of minutes to run each replication.\nparam: num_replications (int): The total number of replications.\nparam: multiprocessing (bool): Whether to use multiprocessing for parallel execution.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">Callable</span>,</span><span class=\"param\">\t<span class=\"n\">minutes</span>,</span><span class=\"param\">\t<span class=\"n\">num_replications</span>,</span><span class=\"param\">\t<span class=\"n\">warm_up</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">multiprocessing</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_to_database</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.simulations.print_stats", "modulename": "src.util.simulations", "qualname": "print_stats", "kind": "function", "doc": "<p>Prints statistics</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>i</strong>:  index</li>\n<li><strong>num_replications</strong>: </li>\n<li><strong>start</strong>: </li>\n<li><strong>tenth_percentage</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">i</span>, </span><span class=\"param\"><span class=\"n\">num_replications</span>, </span><span class=\"param\"><span class=\"n\">start</span>, </span><span class=\"param\"><span class=\"n\">tenth_percentage</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.simulations.create_pivot", "modulename": "src.util.simulations", "qualname": "create_pivot", "kind": "function", "doc": "<p>Create a pivot table from collected simulation statistics.</p>\n\n<p>param: all_entity_stats (list): List of entity statistics from multiple replications.\nparam: all_server_stats (dict): Dictionary of server statistics from multiple replications.\nparam: all_sink_stats (dict): Dictionary of sink statistics from multiple replications.\nparam: all_source_stats (dict): Dictionary of source statistics from multiple replications.\nparam: entity_stat_names (list): List of entity statistics names.\nparam: server_stat_names (list): List of server statistics names.\nparam: sink_stat_names (list): List of sink statistics names.\nparam: source_stat_names (list): List of source statistics names.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">all_entity_stats</span>,</span><span class=\"param\">\t<span class=\"n\">all_server_stats</span>,</span><span class=\"param\">\t<span class=\"n\">all_sink_stats</span>,</span><span class=\"param\">\t<span class=\"n\">all_source_stats</span>,</span><span class=\"param\">\t<span class=\"n\">entity_stat_names</span>,</span><span class=\"param\">\t<span class=\"n\">server_stat_names</span>,</span><span class=\"param\">\t<span class=\"n\">sink_stat_names</span>,</span><span class=\"param\">\t<span class=\"n\">source_stat_names</span>,</span><span class=\"param\">\t<span class=\"n\">store_pivot_in_file</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.singleton", "modulename": "src.util.singleton", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.singleton.Singleton", "modulename": "src.util.singleton", "qualname": "Singleton", "kind": "class", "doc": "<p>The Singleton class can be implemented in different ways in Python. Some\npossible methods include: base class, decorator, metaclass. We will use the\nmetaclass because it is best suited for this purpose.</p>\n", "bases": "builtins.type"}, {"fullname": "src.util.visualization", "modulename": "src.util.visualization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.visualization.visualize_system", "modulename": "src.util.visualization", "qualname": "visualize_system", "kind": "function", "doc": "<p>Visualize the system using Graphviz.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.visualization.scatterplot", "modulename": "src.util.visualization", "qualname": "scatterplot", "kind": "function", "doc": "<p>Creates a scatterplot for a specific component type, using two variables that are displayed on two axes.\nData is collected from <code>Stats.all_detailed_stats</code>, converted into a pandas DataFrame, and plotted using seaborn.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>component_type</strong>:  Type of component (Server, Sink, Source, ...)</li>\n<li><strong>variable1</strong>:  First variable to plot</li>\n<li><strong>variable2</strong>:  Second variable to plot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">component_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">variable1</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">variable2</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.visualization.histogram", "modulename": "src.util.visualization", "qualname": "histogram", "kind": "function", "doc": "<p>Generates histograms for different types of components based on specified statistics.\nEach component's data is visualized in a separate subplot, showing the distribution of a given variable of interest alongside its mean and median values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>component_type</strong>:  Type of component (Server, Sink, Source, ...)</li>\n<li><strong>variable</strong>:  Variable to plot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">component_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.visualization.boxplot", "modulename": "src.util.visualization", "qualname": "boxplot", "kind": "function", "doc": "<p>Collects data for a boxplot from <code>Stats.all_detailed_stats</code> based on the component type and variable.\nIt then creates boxplots and subplots for each component type and specified statistics,\nshowing the distribution of the variable.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>component_type</strong>:  Type of component (Server, Sink, Source, ...)</li>\n<li><strong>variable</strong>:  Variable to plot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">component_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.visualization.violinplot", "modulename": "src.util.visualization", "qualname": "violinplot", "kind": "function", "doc": "<p>Generates violinplots for different types of components.\nViolin plots provide a visual representation of the variable distribution for a specific component type.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>component_type</strong>:  Type of component (Server, Sink, Source, ...)</li>\n<li><strong>variable</strong>:  Variable to plot</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">component_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">variable</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "src.util.work_schedule", "modulename": "src.util.work_schedule", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "src.util.work_schedule.WorkScheduleWeek", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleWeek", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "src.util.work_schedule.WorkScheduleWeek.__init__", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleWeek.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">monday</span>, </span><span class=\"param\"><span class=\"n\">tuesday</span>, </span><span class=\"param\"><span class=\"n\">wednesday</span>, </span><span class=\"param\"><span class=\"n\">thursday</span>, </span><span class=\"param\"><span class=\"n\">friday</span>, </span><span class=\"param\"><span class=\"n\">saturday</span>, </span><span class=\"param\"><span class=\"n\">sunday</span></span>)</span>"}, {"fullname": "src.util.work_schedule.WorkScheduleWeek.work_schedule", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleWeek.work_schedule", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.util.work_schedule.WorkScheduleWeek.start_simulation_in_steps", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleWeek.start_simulation_in_steps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.util.work_schedule.WorkScheduleWeek.get", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleWeek.get", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.work_schedule.WorkScheduleWeek.print_stats", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleWeek.print_stats", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;unknown&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.work_schedule.WorkScheduleWeek.find_overlaps", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleWeek.find_overlaps", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.work_schedule.WorkScheduleDay", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleDay", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "src.util.work_schedule.WorkScheduleDay.__init__", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleDay.__init__", "kind": "function", "doc": "<p>Create an instance of the class that will use the named test\nmethod when executed. Raises a ValueError if the instance does\nnot have a method with the specified name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "src.util.work_schedule.WorkScheduleDay.work_shift", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleDay.work_shift", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "src.util.work_schedule.WorkScheduleDay.get", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleDay.get", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">day_number</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.work_schedule.WorkScheduleDay.set_time", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleDay.set_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start_hour</span>, </span><span class=\"param\"><span class=\"n\">start_minute</span>, </span><span class=\"param\"><span class=\"n\">end_hour</span>, </span><span class=\"param\"><span class=\"n\">end_minute</span>, </span><span class=\"param\"><span class=\"n\">capacity</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.work_schedule.WorkScheduleDay.clear", "modulename": "src.util.work_schedule", "qualname": "WorkScheduleDay.clear", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.work_schedule.steps_in_time", "modulename": "src.util.work_schedule", "qualname": "steps_in_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">step</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "src.util.work_schedule.ask_work_schedule", "modulename": "src.util.work_schedule", "qualname": "ask_work_schedule", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">current_time</span>, </span><span class=\"param\"><span class=\"n\">work_schedule</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();