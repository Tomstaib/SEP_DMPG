name: VerteilteBerechnungen

on:
  push:
    branches:
      - 'VerteilteBerechnungen'
  workflow_dispatch:

env:
  BRANCHNAME: ${{ github.refname }}

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.8
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: myenv
          auto-update-conda: true
          auto-activate-base: false

      - name: Verify environment.yml exists
        id: check_env
        run: |
          if [ -f environment.yml ]; then echo "ENVFOUND=true" >> $GITHUBENV; else echo "ENVFOUND=false" >> $GITHUBENV; fi

      - name: Install dependencies
        if: env.ENV_FOUND == 'true'
        run: |
          conda env update --file environment.yml --name myenv
          conda clean -afy
        shell: bash -l {0}

      - name: Lint with flake8
        if: env.ENV_FOUND == 'true'
        run: |
          conda install -c conda-forge flake8 -y
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        shell: bash -l {0}

      - name: Install pytest
        if: env.ENV_FOUND == 'true'
        run: conda install -c conda-forge pytest -y
        shell: bash -l {0}

      - name: Verify test files exist
        id: checktestfiles
        run: |
          if ls tests/test*.py 1> /dev/null 2>&1; then echo "TESTFILESFOUND=true" >> $GITHUBENV; else echo "TESTFILESFOUND=false" >> $GITHUBENV; fi

      - name: Run tests with pytest
        if: env.ENVFOUND == 'true' && env.TESTFILES_FOUND == 'true'
        run: conda run -n myenv pytest --maxfail=3 --disable-warnings -q
        shell: bash -l {0}

  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Verify Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f Dockerfile ]; then echo "DOCKERFILEFOUND=true" >> $GITHUBENV; else echo "DOCKERFILEFOUND=false" >> $GITHUBENV; fi

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERTOKEN }}" | docker login -u ${{ secrets.DOCKERUSERNAME }} --password-stdin

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        if: env.DOCKERFILE_FOUND == 'true'
        with:
          context: .
          file: Dockerfile
          push: true
          tags: tomstaib/sepdmpg:${{ github.refname }}

